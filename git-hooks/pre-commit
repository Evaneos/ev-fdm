#!/bin/bash
# JS Hint pre-commit hook for git
#

JSHINT_BIN='./node_modules/jshint/bin/jshint'
JSHINT_FILE_PATTERN='^*\.js$'

JSHINT_EXLUDE='.tmp_staging/dist/**/*.js'

JSHINT_REPORTER='./node_modules/jshint-stylish/stylish.js'

TMP_STAGING=".tmp_staging"

# parse config
CONFIG_FILE=$(dirname $0)/config
if [ -e $CONFIG_FILE ]; then
    . $CONFIG_FILE
fi

# simple check if code sniffer is set up correctly
if [ ! -x $JSHINT_BIN ]; then
    echo "JS Hint bin not found or executable -> $JSHINT_BIN"
    exit 1
fi

# stolen from template file
if git rev-parse --verify HEAD > /dev/null
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# this is the magic:
# retrieve all files in staging area that are added, modified or renamed
# but no deletions etc
FILES=$(git diff-index --name-only --cached --diff-filter=ACMR $against -- )

if [ "$FILES" == "" ]; then
    exit 0
fi

# create temporary copy of staging area
if [ -e $TMP_STAGING ]; then
    rm -rf $TMP_STAGING
fi
mkdir $TMP_STAGING


# match files against whitelist
FILES_TO_CHECK=""
for FILE in $FILES
do
    echo "$FILE" | egrep -q "$JSHINT_FILE_PATTERN"
    RETVAL=$?
    if [ "$RETVAL" -eq "0" ]
    then
        FILES_TO_CHECK="$FILES_TO_CHECK $FILE"
    fi
done

# choose the reporter
if [ "$JSHINT_REPORTER" != "" ]; then
    REPORTER="--reporter=$JSHINT_REPORTER"
else
    REPORTER=""
fi

# add exclude path file
if [ "$JSHINT_EXLUDE" != "" ]; then
    EXLUDE="--exclude=$JSHINT_EXLUDE"
else
    EXLUDE=""
fi


# Copy contents of staged version of files to temporary staging area
# because we only want the staged version that will be commited and not
# the version in the working directory
STAGED_FILES=""
for FILE in $FILES_TO_CHECK
do
  ID=$(git diff-index --cached $against $FILE | cut -d " " -f4)

  # create staged version of file in temporary staging area with the same
  # path as the original file so that the jshint ignore filters can be applied
  mkdir -p "$TMP_STAGING/$(dirname $FILE)"
  git cat-file blob $ID > "$TMP_STAGING/$FILE"
  STAGED_FILES="$STAGED_FILES $TMP_STAGING/$FILE"
done
# echo $JSHINT_BIN $REPORTER $EXCLUDE $STAGED_FILES
($JSHINT_BIN $REPORTER  --verbose  $EXLUDE $STAGED_FILES 2>$RETVAL)
RETVAL=$?

# delete temporary copy of staging area
rm -rf $TMP_STAGING

exit $RETVAL
