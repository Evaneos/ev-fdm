{"version":3,"sources":["app.js","controllers/ListController.js","controllers/NotificationsController.js","controllers/SearchController.js","directives/ActivableDirective.js","directives/ClearableDirective.js","directives/DatePickerDirective.js","directives/DownloadDirective.js","directives/EnterDirective.js","directives/EvMenuDirective.js","directives/FiltersDirective.js","directives/FixedHeaderDirective.js","directives/FixedHeadersDirective.js","directives/FlagDirective.js","directives/FocusDirective.js","directives/LinkDisabledDirective.js","directives/LoadingDotsDirective.js","directives/ModuleDirective.js","directives/ModuleHeaderDirective.js","directives/MouseFollowerDirective.js","directives/PaginationDirective.js","directives/PanelBreakpointsDirective.js","directives/PopoverExtendDirective.js","directives/PromiseDirective.js","directives/PromiseProgressDirective.js","directives/ResolvingStateDirective.js","directives/SelectLanguageDirective.js","directives/SelectableDirective.js","directives/SortableDirective.js","directives/TabDirective.js","directives/ThrottleDirective.js","directives/ValueDirective.js","factories/FilterServiceFactory.js","factories/Select2Configuration.js","fanny/index.js","filters/CleanupDate.js","filters/CssifyFilter.js","filters/PrettySecsFilter.js","filters/SumFilter.js","filters/UnsafeFilter.js","services/CommunicationService.js","services/DownloadService.js","services/FilteringService.js","services/ModalService.js","services/NotificationsService.js","services/PanelService.js","services/Panels.js","services/SidonieModalService.js","services/SortService.js","storages/AbstractAutocompleteStorage.js","storages/AjaxStorage.js","storages/RestangularStorage.js","storages/Storage.js","storages/localstorageService.js","directives/FormDirectives/DisableValidationDirective.js","directives/FormDirectives/StrictMinDirective.js","services/panels/PanelManager.js"],"names":[],"mappings":"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","file":"ev-fdm-core.min.js","sourcesContent":["/**\n * Core Application\n */\n\n// Angular depedencies for this app\nangular.module('ev-fdm', ['ui.router', 'ui.date', 'chieffancypants.loadingBar',\n        'ui.bootstrap.tooltip', 'ui.bootstrap.popover', 'ui.select2', 'angularMoment', 'ngAnimate', 'checklist-model',\n        'ui.bootstrap', 'restangular'])\n\n\n// configure the loading bar to be displayed\n// just beneath the menu\n.config(['cfpLoadingBarProvider', function(cfpLoadingBarProvider) {\n    cfpLoadingBarProvider.includeSpinner = false;\n    cfpLoadingBarProvider.parentSelector = '#lisette-menu';\n}])\n\n.config(['$tooltipProvider', function($tooltipProvider) {\n    $tooltipProvider.options({\n        placement: 'bottom',\n        popupDelay: 100\n    });\n    $tooltipProvider.setTriggers({\n        'mouseenter': 'mouseleave',\n        'click': 'click',\n        'focus': 'blur',\n        'never': 'mouseleave',\n\n        // Custom event, the tooltip appears when the element has the focus, and disappear when a key\n        // in pressed (or the element has blurred).\n        'focus-not-typing': 'blur-or-typing'\n    });\n}])\n\n/**\n * Define a default error state for our app\n */\n.config(['$stateProvider', function($stateProvider) {\n    $stateProvider.state('ev-error', {\n        templateUrl: 'ev-error.phtml'\n    });\n}])\n\n.config(['RestangularProvider', function(restangularProvider) {\n\n}])\n\n\n// ----------------------------------------------------\n// ATTACH TO MODULE\n// ----------------------------------------------------\n\n.run(['$rootScope', '$state', '$location', 'uiSelect2Config', function($rootScope,\n        $state, $location, uiSelect2Config) {\n\n    // defaults for select2\n    uiSelect2Config.minimumResultsForSearch = 7;\n    uiSelect2Config.allowClear = true;\n\n    // On the first loading state, we set this value\n    // It used by the ev-menu directive which is loaded asynchronously\n    // and can't listen to this event on the first load.\n    $rootScope.$on('$stateChangeStart', function(event, toState) {\n        toState.state = toState.name.split('.')[0];\n        $rootScope['evmenu-state'] = toState;\n    });\n\n\n    // language for the user OR navigator language OR english\n    window.moment.lang([window.navigator.language, 'en']);\n\n}]);\n","angular.module('ev-fdm')\n    .factory('ListController', ['$state', '$stateParams', 'Restangular', function($state, $stateParams, restangular) {\n\n        function ListController($scope, elementName, elements, defaultSortKey, defaultReverseSort) {\n            var self = this;\n\n            /*\n                Properties\n             */\n            this.$scope = $scope;\n            this.elementName = elementName;\n            this.elements = elements;\n            this.defaultSortKey = defaultSortKey;\n            this.defaultReverseSort = defaultReverseSort;\n            this.sortKey = this.defaultSortKey;\n            this.reverseSort = this.defaultReverseSort;\n\n            this.updateScope();\n\n            /*\n                Pagination method that should be called from the template\n             */\n            this.$scope.changePage = function(newPage) {\n                self.update(newPage, self.filters, self.sortKey, self.reverseSort);\n            };\n\n            /*\n                Sort method that should be called from the template\n             */\n            this.$scope.sortChanged = function() {\n                self.sortKey = self.$scope.sortKey;\n                self.reverseSort = self.$scope.reverseSort;\n                self.update(1, self.filters, self.sortKey, self.reverseSort);\n            };\n\n            /*\n                Display an item by changing route\n             */\n            this.$scope.toggleDetailView = function(element) {\n                self.toggleView('view', element);\n            };\n\n            /*\n                Update the view when filter are changed in the SearchController\n             */\n            this.$scope.$on('common::filters.changed', function(event, filters) {\n                self.filters = filters;\n                self.sortKey = self.defaultSortKey;\n                self.defaultReverseSort = self.defaultReverseSort;\n                self.update(1, self.filters, self.sortKey, self.reverseSort);\n            });\n\n            /*\n                When returning to the list state remove the active element\n             */\n            this.$scope.$on('$stateChangeSuccess', function(event, toState) {\n                if(toState.name === self.elementName) {\n                  self.$scope.activeElement = null;\n                }\n                else {\n                  self.setActiveElement();\n                }\n            });\n\n            this.$scope.$on(this.elementName + '::updated', function(event, updatedElements) {\n                self.update(self.$scope.currentPage, self.filters, self.sortKey, self.reverseSort);\n            });\n\n            this.$scope.$on(this.elementName + '::created', function(event, createdElements) {\n                self.update(self.$scope.currentPage, self.filters, self.sortKey, self.reverseSort);\n            });\n\n            this.$scope.$on(this.elementName + '::deleted', function(event, deletedElements) {\n                self.update(self.$scope.currentPage, self.filters, self.sortKey, self.reverseSort);\n            });\n        }\n\n        ListController.prototype.update = function(page, filters, sortKey, reverseSort) {\n            var self = this;\n            self.fetch(page, filters, sortKey, reverseSort).then(function(elements) {\n                self.elements = elements;\n                self.updateScope();\n            });\n        };\n\n        ListController.prototype.updateScope = function () {\n            var self = this;\n\n            this.$scope[this.elementName] = this.elements;\n            this.$scope.currentPage = this.elements.pagination.current_page;\n            this.$scope.pageCount = this.elements.pagination.total_pages;\n            this.$scope.sortKey = this.sortKey;\n            this.$scope.reverseSort = this.reverseSort;\n            this.$scope.selectedElements = [];\n            this.setActiveElement();\n        };\n\n        ListController.prototype.setActiveElement = function() {\n          var self = this;\n          this.$scope.activeElement = null;\n\n          if(angular.isDefined($state.params.id)) {\n            angular.forEach(this.elements, function(element) {\n              var elementId = restangular.configuration.getIdFromElem(element);\n              if(elementId == $state.params.id) {\n                self.$scope.activeElement = element;\n                }\n            });\n          }\n        };\n\n        ListController.prototype.toggleView = function(view, element) {\n            if(!element) {\n                $state.go(this.elementName);\n                return;\n            }\n\n            var id = restangular.configuration.getIdFromElem(element);\n\n            if(!id || $stateParams.id === id) {\n                $state.go(this.elementName);\n            }\n            else {\n                $state.go(this.elementName + '.' + view, {id: id});\n            }\n        };\n\n        return ListController;\n\n    }]);\n","'use strict';\n\nvar NotificationsController = ['$scope', 'NotificationsService', function($scope, NotificationsService) {\n    $scope.notifications = NotificationsService.list;\n    \n    $scope.$watch(function() {\n        return NotificationsService.activeNotification;\n    }, function() {\n        $scope.activeNotification = NotificationsService.activeNotification;\n    });\n    \n    $scope.getClass = function (notification){\n        if (!notification) return '';\n        switch (notification.type){\n            case NotificationsService.type.ERROR:\n                return 'danger';\n            case NotificationsService.type.SUCCESS:\n                return 'success';\n            case NotificationsService.type.WARNING:\n                return 'warning';\n            case NotificationsService.type.INFO:\n                return 'info';\n            default:\n                return 'success';\n        }\n    };\n\n    $scope.remove = function(notification) {\n        NotificationsService.remove(notification);\n    };\n}];\n\nangular.module('ev-fdm')\n    .controller('NotificationsController', NotificationsController);","angular.module('ev-fdm')\n    .factory('SearchController', ['$rootScope', function($rootScope) {\n\n        function SearchController($scope) {\n            var self = this;\n\n            this.$scope = $scope;\n            this.$scope.filters = {};\n\n            this.$scope.filtersChanged = function() {\n                $rootScope.$broadcast('common::filters.changed', self.$scope.filters);\n            };\n        };\n\n        return SearchController;\n    }]);","'use strict';\n\nangular.module('ev-fdm')\n    .directive('activableSet', function() {\n        return {\n            restrict: 'A',\n            scope: false,\n            controller: ['$scope', '$attrs', '$parse', function($scope, $attrs, $parse) {\n\n                var activeElementGet = $parse($attrs.activeElement),\n                    activeElementSet = activeElementGet.assign;\n\n                var self = this;\n                $scope.$watch(function() {\n                    return activeElementGet($scope);\n                }, function(newActiveElement) {\n                    self.activeElement = newActiveElement;\n                });\n\n               this.toggleActive = function(value) {\n                    if(value !== this.activeElement) {\n                        if(activeElementSet) {\n                            activeElementSet($scope, value);\n                        }\n\n                        this.activeElement = value;\n                    }\n                    else {\n                        if(activeElementSet) {\n                            activeElementSet($scope, null);\n                        }\n\n                        this.activeElement = undefined;\n                    }\n\n                    $scope.$eval($attrs.activeChange);\n               };\n\n            }]\n        };\n    })\n    .directive('activable', ['$parse', function($parse) {\n            return {\n                restrict: 'A',\n                require: '^activableSet',\n                link: function(scope, element, attr, ctrl) {\n                    element.addClass('clickable');\n                    var elementGetter = $parse(attr.activable),\n                        currentElement = elementGetter(scope);\n\n\n                    scope.$watch(function() { return elementGetter(scope); }, function(newCurrentElement) {\n                      currentElement = newCurrentElement;\n                    });\n\n                    scope.$watch(function() { return ctrl.activeElement; },\n                     function(newActiveElement, oldActiveElement) {\n                        if(newActiveElement && currentElement === newActiveElement) {\n                            element.addClass('active');\n                        }\n                        else {\n                            element.removeClass('active');\n                        }\n                    });\n\n                    element.on('click', function(event) {\n                        if(!$(event.target).closest('.block-active').length && !event.ctrlKey && ! event.shiftKey) {\n                            scope.$apply(function() {\n                                ctrl.toggleActive(currentElement);\n                            });\n                        }\n                    });\n                }\n            };\n        }]);\n","'use strict';\n\nvar module = angular.module('ev-fdm');\n\nmodule.directive('clearable', [function() {\n\n    return {\n        restrict: 'A',\n        require: 'ngModel',\n        link: function(scope, element, attr, ctrl) {\n\n            var clearButton = angular.element('<button class=\"clear\" ng-click=\"clear()\">×</button>');\n            element.after(clearButton);\n\n            clearButton.on('click', function() {\n                scope.$apply(function() {\n                    element.val(''); \n                    ctrl.$setViewValue('');\n                });\n            });\n\n            scope.$watch(function() { return ctrl.$isEmpty(ctrl.$viewValue); }, function(isEmpty) {\n                if(isEmpty) {\n                    clearButton.hide();\n                }\n                else {\n                    clearButton.show();\n                }\n            });\n\n        }\n    }\n}]);","'use strict';\n\nangular.module('ev-fdm')\n.directive('evDatepicker', function() {\n    return {\n        restrict: 'A',\n        require : 'ngModel',\n        link : function (scope, element, attrs, ngModelCtrl) {\n\n            var dateCanBeInTheFutur = attrs.futurAllowed !== 'false',\n                dateFormat = attrs.dateFormat || 'dd/mm/yy';\n\n            $(function(){\n                element.datepicker({\n                    dateFormat: dateFormat,\n                    maxDate: dateCanBeInTheFutur? null : 0,\n                    onSelect:function (date) {\n                        ngModelCtrl.$setViewValue(date);\n                        scope.$apply();\n                    }\n                });\n\n            });\n        }\n    }\n});","angular.module('ev-fdm')\n.directive('download', ['$http', '$location', '$document', 'DownloadService', function($http, $location, $document, downloadService) {\n    return {\n        link: function(scope, elm, attrs) {\n            elm.on('click', function(event) {\n                $http.get(attrs.download).success(function(data) {\n                \tdownloadService.download(data.url);\n                });\n            });\n        }\n    }\n}]);","'use strict';\n\nangular.module('ev-fdm')\n.directive('ngEnter', function() {\n    return function(scope, element, attrs) {\n        element.bind(\"keydown keypress\", function(event) {\n            if(event.which === 13) {\n                scope.$apply(function(){\n                    scope.$eval(attrs.ngEnter);\n                });\n\n                event.preventDefault();\n            }\n        });\n    };\n});","'use strict';\n\nfunction MenuManagerProvider() {\n\n    var self = this;\n    this.tabs = [];\n    this.activeTab = null;\n    this.lastTab = null;\n\n    this.addTab = function(tab) {\n        this.tabs.push(tab);\n        return this;\n    };\n\n    function findTab(stateName) {\n        var res = null;\n        angular.forEach(self.tabs, function(tab) {\n            if(stateName === tab.state) {\n                res = tab;\n            }\n        });\n\n        return res;\n    }\n\n    function selectTab(tab) {\n        tab = tab || {};\n        tab = findTab(tab.state);\n\n        if(!tab) {\n            return;\n        }\n\n        if(self.activeTab) {\n            self.lastTab = self.activeTab;\n            self.activeTab.active = false;\n        }\n\n        tab.active = true;\n        self.activeTab = tab;\n    }\n\n    this.$get = ['$rootScope', '$state', function($rootScope, $state) {\n\n        // Handle first page load\n        $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState) {\n            if (fromState.name === '') {\n                var toTab = findTab(toState.name);\n\n                if(toTab) {\n                    selectTab(toTab);\n                }\n            }\n        });\n\n        $rootScope.$on('$stateChangeError', function(event) {\n            selectTab(self.lastTab);\n        });\n\n        return {\n            tabs: self.tabs,\n            selectTab: selectTab\n        };\n    }];\n}\n\nfunction EvMenuDirective(menuManager) {\n    return {\n        restrict: 'E',\n        replace: true,\n        template:   '<ul class=\"lisette-module-tabs nav nav-tabs\" ng-cloak>' +\n                        '<li ng-repeat=\"tab in tabs\" ng-class=\"{active: tab.active}\">' +\n                            '<a ng-click=\"selectTab(tab)\">{{ tab.name }}</a>' +\n                        '</li>' +\n                    '</ul>',\n        controller: [ '$scope', '$state', '$rootScope', function($scope, $state, $rootScope) {\n            $scope.tabs = menuManager.tabs;\n\n            if($rootScope['evmenu-state']) {\n                menuManager.selectTab($rootScope['evmenu-state']);\n            }\n\n            $scope.selectTab = function(tab) {\n                menuManager.selectTab(tab);\n                $state.go(tab.state);\n            }\n        }]\n    }\n\n};\n\nangular.module('ev-fdm')\n    .provider('menuManager', [MenuManagerProvider])\n    .directive('evMenu', ['menuManager', EvMenuDirective]);","'use strict';\n\nvar module = angular.module('ev-fdm');\n\nmodule.directive('evFilters', function() {\n    return {\n        restrict: 'E',\n        replace: true,\n        transclude: true,\n        templateUrl: 'filters.phtml'\n    };\n});","(function () {\n    'use strict';\n    angular.module('ev-fdm')\n        .directive('evFixedHeader', function () {\n            return {\n                link: function($scope, $element, $attrs) {\n                    $element.addClass('full-height');\n                    var header = $element.find('>.ev-header');\n                    var body   = $element.find('>.ev-body');\n                    body.css({'overflow-y': 'auto'});\n\n                    // Compute and return the height available for the element's body\n                    var getBodyHeight = function() {\n                        var bodyHeight = $element.innerHeight() - header.outerHeight(true);\n                        // This allows us to remove the padding/etc.. from the measurement\n                        bodyHeight -= body.innerHeight() - body.height();\n\n                        return bodyHeight;\n                    };\n\n                    var refreshDimensions = function() {\n                        body.hide();\n                        body.height(getBodyHeight());\n                        body.show();\n\n                        if ($attrs.refreshIdentifier) {\n                            $scope.$broadcast('evFullHeightBody::refresh::' + $attrs.refreshIdentifier);\n                        }\n                    };\n\n\n                    $scope.$watch(function() {\n                        return getBodyHeight();\n                    }, refreshDimensions);\n\n                    $(window).bind('resize', refreshDimensions);\n\n                    if ($attrs.refreshOn) {\n                        $scope.$on('evFullHeightBody::refresh::' + $attrs.refreshOn, refreshDimensions);\n                    }\n\n                }\n            };\n        });\n}) ();\n","// @TODO: DELETE //\nangular.module('ev-fdm')\n    .directive('evFixedHeaders', ['$timeout', function ($timeout) {\n\n    function _sync($table) {\n        var $headers = $table.find('thead > tr');\n        var $firstTr = $table.find('tbody > tr').first();\n\n        // no header to resize\n        if (!$headers.length) { return; }\n\n        // uniform size for every header\n        if (!$firstTr.length) {\n            $headers.addClass('uniform');\n            _uniformSize($headers, $table.outerWidth());\n            return;\n        } else {\n            $headers.removeClass('uniform');\n        }\n\n        // compute size from first line sizing\n        var currentChildIndex = 0;\n        var $ths = $headers.find('th');\n        $ths.each(function() {\n            var $td = $firstTr.find('td:nth-child(' + (1 + currentChildIndex) + ')');\n            if ($td.is(':visible')) {\n                $(this).css('width', $td.outerWidth()).show();\n                $(this).css('maxWidth', $td.outerWidth()).show();\n            } else {\n                // $(this).hide();\n            }\n            currentChildIndex++;\n        });\n    }\n\n    function _timeoutSync($table) {\n        $timeout(function() {\n            _sync($table);\n        }, 0, false);\n    }\n\n    function _uniformSize($headers, width) {\n        var $tds = $headers.find('th');\n        if (!$tds.length) { return; }\n        $tds.each(function() {\n            $(this).css('width', (width/$tds.length) + 'px');\n        });\n    }\n\n    return {\n\n        restrict: 'A',\n        replace: false,\n\n        scope: {\n            rows: '='\n        },\n\n        link: function ($scope, element, attrs) {\n            var $table = $(element);\n            $table.addClass('fixed-headers');\n            $(window).on('resize', function() {\n                _sync($table);\n            });\n            $scope.$on('module-layout-changed', function() {\n                _sync($table);\n            });\n            // watch for raw data changes !\n            $scope.$watch('rows', function() {\n                _timeoutSync($table);\n            }, true);\n            // wait for end of digest then sync headers\n            _timeoutSync($table);\n        }\n    };\n\n}]);","'use strict';\n\nvar module = angular.module('ev-fdm')\n.directive('evFlag', function () {\n    return {\n        restrict: 'E',\n        replace: true,\n        scope: {\n            lang: '='\n        },\n        template: '<i class=\"icon icon-flag flag-{{lang}}\"></i>'\n    };\n});","angular.module('ev-fdm')\n.directive('focus', [function() {\n    return {\n        link: function(scope, elm, attrs, ctrl) {\n            scope.$evalAsync(function() {\n                elm[0].focus();\n            });\n        }\n    }\n}]);","'use strict';\n\nangular.module('ev-fdm')\n    .directive('linkDisabled', function() {\n        return {\n            restrict: 'A',\n            link: function(scope, element, attrs) {\n                var oldNgClick = attrs.ngClick;\n                if (oldNgClick) {\n                    scope.$watch(attrs.linkDisabled, function (value, oldValue) {\n                        if (!! value) {\n                            element.unbind('click');\n                            element.attr('disabled', 'disabled');\n                        } else if (oldValue) {\n                            attrs.$set('ngClick', oldNgClick);\n                            element.bind('click', function () {\n                                scope.$apply(attrs.ngClick);\n                            });\n                            element.removeAttr('disabled');\n                        }\n                    });\n                }\n            }\n        };\n    });","'use strict';\n\nvar module = angular.module('ev-fdm')\n.directive('evLoadingDots', function () {\n    return {\n        restrict: 'E',\n        replace: true,\n        template: '<span class=\"loading-dots\"><span></span><span></span><span></span></span>'\n    };\n});","'use strict';\n\nangular.module('ev-fdm')\n    .directive('evModule', [ '$timeout', '$rootScope', function($timeout, $rootScope) {\n\n    var bars = {\n        tabs: {\n            versions: []\n        },\n        topbar: {\n            versions: [ 'size-mini', 'size-default', 'size-big' ]\n        },\n        leftbar: {\n            versions: []\n        },\n        bottombar: {\n            versions: []\n        }\n    };\n\n    /**\n     * Looks inside the module element for any module bar, and populates\n     * required classes for each bar on the module container\n     */\n    function updateBarClasses($moduleEl) {\n        return function() {\n            angular.forEach(bars, function(barConfig, barId) {\n                var $el = $moduleEl.find('.lisette-module-' + barId);\n                var hasClass = 'has-' + barId;\n                $moduleEl.removeClass(\n                    _(barConfig.versions)\n                        .map(function(versionId) {\n                            return barId + '-' + versionId\n                        })\n                        .join(' '));\n                if ($el.length) {\n                    $moduleEl.addClass(hasClass);\n                    angular.forEach(barConfig.versions, function(versionId) {\n                        if ($el.hasClass('version-' + versionId)) {\n                            $moduleEl.addClass(barId + '-' + versionId);\n                        }\n                    });\n                } else {\n                    $moduleEl.removeClass(hasClass);\n                }\n            });\n            $rootScope.$broadcast('module-layout-changed');\n        }\n    };\n\n    return {\n        restrict: 'A',\n        link: function($scope, element, attributes) {\n            element.addClass('lisette-module');\n            $scope.$on('$stateChangeSuccess', function() {\n                $timeout(updateBarClasses(element), 0);\n            });\n            $timeout(updateBarClasses(element), 0);\n        }\n    };\n}\n]);","'use strict';\n\nangular.module('ev-fdm')\n.directive('evModuleHeader', ['$timeout', function ($timeout) {\n\n    var self = this;\n\n    function _sync($wrapper) {\n        var $header = $wrapper.find('.lisette-module-header');\n\n        // make sure the wrapper spans the right height\n        // even when the header is position fixed\n        $wrapper.height($header.height() - 1);\n\n        // declaring affix to bootstrap\n        // bs will watch the scroll for us and add the affix css class to $header\n        $header.affix({\n            offset: {\n                top: 1 //$('#lisette-menu').attr('data-offset-top')\n            }\n        });\n    }\n\n    return function($scope, element, attrs) {\n        var $wrapper = $(element);\n        $timeout(function() {\n            _sync($wrapper);\n        }, 0, false);\n        $(window).on('resize', function() {\n            _sync($wrapper);\n        });\n        $scope.$on('itemsLoaded', function() {\n            _sync($wrapper);\n        });\n    }\n}]);","'use strict';\n\nangular.module('ev-fdm')\n    .directive('mouseFollower', ['$document', function ($document) {\n        return {\n            restrict: 'A',\n            link : function (scope, element, attr){\n                element = angular.element(element);\n                element.css('position', 'absolute');\n                element.css('z-index', 1500);\n\n                $document.on('mousemove', function(evt) {\n                    element.css({\n                        left:  evt.pageX,\n                        top:   evt.pageY\n                    });\n                });\n            }\n        }\n    }]);","'use strict';\n\nvar module = angular.module('ev-fdm')\n    .directive('evPagination', [function () {\n        var ELLIPSIS = '...';\n        return {\n            restrict: 'AE',\n            replace: true,\n            templateUrl: 'pagination.phtml',\n            scope: {\n                currPage:     '=',\n                nbPage:       '=',\n                onPageChange: '='\n            },\n\n            link : function (scope){\n                scope.paginationButtons = [];\n                scope.prevClass = '';\n                scope.nextClass = '';\n\n                if (!scope.currPage) scope.currPage = 1;\n                if (!scope.nbPage)   scope.nbPage   = 1;\n\n                scope.generateButtons = function () {\n                    var nbAround = 2; // We want to have this amount of links around the current page.\n\n                    scope.paginationButtons = [];\n                    // Add 1\n                    scope.paginationButtons.push ({value: 1, class:scope.currPage==1 ? 'active':'' });\n\n                    // Add the 3 dots\n                    if (scope.currPage-nbAround > 2) {\n                        scope.paginationButtons.push({ value: ELLIPSIS, class:'disabled' });\n                    }\n\n                    // add the surrounding page numbers\n                    for (var i = nbAround; i > 0; i--) {\n                        if (scope.currPage-i > 1) {\n                            scope.paginationButtons.push ({value: scope.currPage-i});\n                        }\n                    }\n\n                    // add the actual page\n                    if (scope.currPage != 1 && scope.currPage != scope.nbPage) {\n                        scope.paginationButtons.push ({ value: scope.currPage, class:'active' });\n                    }\n\n                    // add the surrounding page numbers\n                    for (var i = 1; i <= nbAround; i++) {\n                        if (scope.currPage+i < scope.nbPage) {\n                            scope.paginationButtons.push ({value: scope.currPage+i});\n                        }\n                    }\n\n                    // Add the 3 dots\n                    if (scope.currPage+nbAround < scope.nbPage-1){\n                        scope.paginationButtons.push ({ value: ELLIPSIS, class:'disabled' });\n                    }\n\n                    // Add final page number\n                    if (scope.nbPage > 1){\n                        scope.paginationButtons.push ({value: scope.nbPage,class:scope.currPage==scope.nbPage ? 'active':''});\n                    }\n                    // if (scope.currPage == 1)            { scope.prevClass='inactive'; }\n                    // if (scope.currPage == scope.nbPage) { scope.nextClass='inactive'; }\n                }\n\n                scope.previousPage = function (){\n                    if (scope.currPage > 1) {\n                        scope.currPage--;\n                        if(angular.isFunction(scope.onPageChange)) {\n                            scope.onPageChange(scope.currPage);\n                        }\n                    }\n\n                }\n\n                scope.changePage = function (value){\n                    if (value != ELLIPSIS && value >=1 && value <= scope.nbPage){\n                        scope.currPage = value;\n                        \n                        if(angular.isFunction(scope.onPageChange)) {\n                            scope.onPageChange(value);\n                        }\n                    }\n                }\n\n                scope.nextPage = function (){\n                    if (scope.currPage < scope.nbPage){\n                        scope.currPage++;\n                        \n                        if(angular.isFunction(scope.onPageChange)) {\n                            scope.onPageChange(scope.currPage);\n                        }\n                    }\n                }\n\n                scope.$watch('nbPage + currPage', function() {\n                    scope.generateButtons ();\n                });\n            }\n    };\n}]);","'use strict';\n\nvar module = angular.module('ev-fdm');\n\nmodule.directive('evPanelBreakpoints', [ '$timeout', '$rootScope', 'panelManager', function($timeout, $rootScope, panelManager) {\n\n    var BREAKS = [ 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100 ];\n\n    function getBPMatching(width) {\n        var breakp, index;\n        for (index = 0; index < BREAKS.length; index++) {\n            if (width < BREAKS[index]) {\n                breakp = BREAKS[index];\n                break;\n            }\n        }\n        if (breakp) return index;\n        else return -1;\n    }\n\n    function applyBPAttribute(element, breakpIndex) {\n        var attributeValue = '';\n        if (breakpIndex == -1) {\n            attributeValue = 'max';\n        } else {\n            attributeValue = BREAKS[breakpIndex];\n        }\n        element.attr('data-breakpoint', attributeValue);\n    }\n\n    function updateBreakpoints(element) {\n        var inner = element.find('.panel-inner');\n        var bp = getBPMatching(inner.outerWidth());\n        applyBPAttribute(element, bp);\n    }\n\n    return {\n        restrict: 'A',\n        scope: false,\n        replace: true,\n        transclude: true,\n        templateUrl: 'panels/panel-skeleton.phtml',\n        link: function(scope, element, attrs) {\n            /**\n             * Listener to update the breakpoints properties\n             */\n            element.resizable({\n                handles: \"w\",\n                resize: function(event, ui) {\n                    updateBreakpoints(element);\n                    $rootScope.$broadcast('panel-resized', element);\n                }\n            });\n            $rootScope.$on('module-layout-changed', function() {\n                updateBreakpoints(element);\n            });\n            $timeout(function() {\n                updateBreakpoints(element);\n                // focus a freshly-opened modal\n                element[0].focus();\n            });\n        }\n    };\n}]);","(function () {\n    'use strict';\n        // update popover template for binding unsafe html\n    angular.module(\"template/popover/popover.html\", []).run([\"$templateCache\", function ($templateCache) {\n        $templateCache.put(\"template/popover/popover.html\",\n          \"<div class=\\\"popover {{placement}}\\\" ng-class=\\\"{ in: isOpen(), fade: animation() }\\\">\\n\" +\n          \"  <div class=\\\"arrow\\\"></div>\\n\" +\n          \"\\n\" +\n          \"  <div class=\\\"popover-inner\\\">\\n\" +\n          \"      <h3 class=\\\"popover-title\\\" ng-bind-html=\\\"title\\\" ng-show=\\\"title\\\"></h3>\\n\" +\n          \"      <div class=\\\"popover-content\\\"ng-bind-html=\\\"content\\\"></div>\\n\" +\n          \"  </div>\\n\" +\n          \"</div>\\n\" +\n          \"\");\n    }]);\n    angular.module('ev-fdm')\n        .directive('popover', ['$timeout', function ($timeout) {\n        \treturn {\n        \t\trestrict: 'A',\n\t\t\t\tlink: function ($scope, elem, attrs) {\n                    var showTimeout;\n                    elem.bind('focus', function () {\n                        elem.triggerHandler('focus-not-typing');\n                    });\n\t\t\t\t\telem.bind('blur', function () {\n                        if (showTimeout) {$timeout.cancel(showTimeout);}\n                        elem.triggerHandler('blur-or-typing');\n                    });\n                    elem.bind('keypress', function () {\n                        if (showTimeout) {$timeout.cancel(showTimeout);}\n                        elem.triggerHandler('blur-or-typing');\n                        showTimeout = $timeout(function () {\n                            elem.triggerHandler('focus-not-typing');\n                        }, 1000);\n                    });\n\t\t\t\t}\n        \t};\n        }]);\n}) ();\n","/**\n * Display a promise state as css classes (promise-resolving, promise-resolved, promise-rejected)\n * + Supports empty lists by displaying a message (promise-empty)\n *\n * Options :\n * - emptyMessage (string) - display a message when promise resolves to empty array\n * - promiseDefaultStyles (boolean, default true) - apply spinning evaneos logo when resolving\n *\n * Examples :\n * <div promise=\"myPromise\"\n *     empty-message=\"No quote\"\n *     promise-default-styles=\"true\">\n *\n */\nangular.module('ev-fdm')\n    .directive('promise', [function () {\n\n    function applyClass(classes, element) {\n        element.removeClass('promise-resolved promise-resolving promise-empty promise-rejected');\n        element.addClass(classes);\n    }\n\n    return {\n\n        restrict: 'A',\n        replace: false,\n\n        controller: ['$scope', '$attrs', '$parse', '$element', function($scope, $attrs, $parse, $element) {\n            var promiseGetter = $parse($attrs.promise);\n            var emptyMessage = $attrs.emptyMessage;\n            var promiseDefaultStyles = ($attrs.promiseDefaultStyles !== 'false');\n            if (promiseDefaultStyles) {\n                applyClass('promise-default-styles', $element);\n            }\n            if (emptyMessage) {\n                $element.append('<div class=\"promise-empty-message\">' + emptyMessage + '</div>');\n            }\n            $scope.$watch(function() {\n                return promiseGetter($scope);\n            }, function(promise) {\n                if (promise) {\n                    applyClass('promise-resolving', $element);\n                    promise.then(function(result) {\n                        // make sure we are dealing with arrays\n                        // otherwise (not a collection, we can't assume it's empty or non empty)\n                        if (emptyMessage && angular.isArray(result) && !result.length) {\n                            applyClass('promise-resolved promise-empty', $element);\n                        } else {\n                            applyClass('promise-resolved', $element);\n                        }\n\n                        return result;\n                    }, function() {\n                        applyClass('promise-rejected', $element);\n                    })\n                } else {\n                    applyClass('promise-resolved', $element);\n                }\n            });\n        }]\n    }\n\n}]);","(function () {\n    'use strict';\n    angular.module('ev-fdm')\n        .directive('evPromiseProgress', [function () {\n\n    /*  ev-promise-progress\n        ===================\n        Hi! I'm a directive that link a progress bar to a promise.\n\n        Just give me a promise argument. I'll update automatically each time the `notify` callback is called. Of course\n        I assume that a percentage progress is given.\n\n        Beware! Each time the promise changes, and is replaced by a new one, I bind the progress bar to the new promise.\n        Without unbinding from the previous one. If it wasn't completed, it can leads to strange behavior (i.e. the\n        progress bar taking value from both at the same time, doing back and forth).\n    */\n            return {\n                restrict: 'A',\n                replace: true,\n                scope: {\n                    promise: '=evPromiseProgress',\n                },\n                template: '<div role=\"progressbar\" class=\"ev-progress\" aria-valuemin=\"0\" aria-valuemax=\"100\"' +\n                    'aria-valuenow=\"0\"> <div class=\"ev-progress-overlay\"></div> </div> ',\n                link: function ($scope, elem, attrs) {\n                    var progressBar = elem.find(angular.element(document.querySelector('.ev-progress-overlay')));\n                    progressBar.css({width: '0%'});\n                    $scope.$watch('promise', function (newPromise) {\n                        if (!newPromise || !newPromise.then) { return; }\n                        progressBar.css({width: '0%'});\n                        newPromise.then(null, null, function notify (progress) {\n                            if (typeof(progress) === 'object') {\n                                progress = progress.progress;\n                            }\n                            progressBar.css({width: progress + '%'});\n                        });\n                        newPromise.finally(function () {\n                            progressBar.css({width: '100%'});\n                        });\n                    });\n                }\n            };\n        }]);\n}());","'use strict';\n\nangular.module('ev-fdm').directive('body', ['$rootScope', 'NotificationsService', '$state', function ($rootScope, notificationsService, $state) {\n    return {\n        restrict: 'E',\n        link: function(scope, element, attrs) {\n\n            $rootScope.$on('$stateChangeStart', function(event, toState) {\n                // not a tab changing\n                var dotX = $state.current.name.indexOf('.'),\n                     stateName = (dotX != -1) ? $state.current.name.substring(0, dotX) : $state.current.name;\n\n                if (!stateName || toState.name.indexOf(stateName) !== 0) {\n                    $('body').addClass('state-resolving');\n                }\n            });\n\n            $rootScope.$on('$stateChangeSuccess', function() {\n                element.removeClass('state-resolving');\n            });\n\n            /**\n             * When there is an error on a state change\n             *\n             * In your state config you can add the following.\n             * This will allows the router to fallback to this state on error\n             * while displaying the specified message\n\n                  fallback: {\n                    state: 'list',\n                    message: t('Unable to open this transaction!')\n                  }\n             */\n            $rootScope.$on('$stateChangeError', function(event, toState, toParams, fromState, error) {\n                $('body').removeClass('state-resolving');\n\n                var errorMessage = (toState.fallback && toState.fallback.message) || 'Error';\n\n                notificationsService.addError({\n                    text: errorMessage\n                });\n\n                // Redirect to the fallback we defined in our state\n                if(toState && toState.fallback && toState.fallback.state) {\n                  $state.go(toState.fallback.state);\n                }\n            });\n        }\n    };\n}]);\n","angular.module('ev-fdm')\n    .provider('evSelectLanguage', function() {\n        this.$get =function () {\n            return {\n                availableLang: this.availableLang || [],\n                defaultLang: this.defaultLang\n            };\n        };\n\n        this.setAvailableLang =function (availableLang) {\n            this.availableLang = availableLang;\n        };\n        this.setDefaultLang =function (defaultLang) {\n            this.defaultLang = defaultLang;\n        };\n    })\n    .directive('evSelectLanguage', ['evSelectLanguage', function (cfg) {\n        return {\n            template:\n                '<div class=\"ev-language-tabs\">' +\n                    '<div class=\"btn-group\">' +\n                        '<button class=\"btn btn-lg btn-default\" ng-repeat=\"lang in availableLang\"'+\n                            'ng-class=\"{active: selectedLang===lang}\"' +\n                            'ng-click=\"$parent.selectedLang=lang\">' +\n                            '<span class=\"ev-icons-flags\" ng-class=\"\\'icon-\\' + lang\"></span>' +\n                        '</button>' +\n                    '</div>' +\n                '</div>',\n            restrict: 'AE',\n            scope: {\n                selectedLang: '=lang'\n            },\n            link: function($scope) {\n                $scope.availableLang = cfg.availableLang;\n                if (!$scope.selectedLang) {\n                    $scope.selectedLang = cfg.defaultLang;\n                }\n            }\n        };\n    }]);\n","'use strict';\n/// This directive currently depend on ng-repeat $index for the\n///  shift selection. It would be great to remove this depency.\nangular.module('ev-fdm')\n    .directive('selectableSet', [function() {\n        return {\n            restrict: 'A',\n            controller: ['$scope', '$parse', '$element', '$attrs', '$document',\n            function($scope, $parse, $element, $attrs, $document) {\n                var self = this,\n                    shiftKey = 16;\n\n                var selectedElementsGet = $parse($attrs.selectedElements);\n\n                this.selectableElements = [];\n                this.selectedElement = [];\n\n                var lastClickedIndex,\n                    shiftSelectedElements = [];\n\n                $scope.$watch(function() {\n                    return selectedElementsGet($scope);\n                  },\n                  function() {\n                    self.selectedElements = angular.isArray(selectedElementsGet($scope))?\n                      selectedElementsGet($scope) : [];\n                  }\n                );\n\n                // Toggle a noselect class on the element when the shift key is pressed\n                // This allows us to disable selection overlay via css\n                $document.on('keydown', function(event) {\n                    if(event.keyCode === shiftKey) {\n                        $element.addClass('noselect');\n                    }\n                });\n\n                $document.on('keyup', function(event) {\n                    if(event.keyCode === shiftKey) {\n                        $element.removeClass('noselect');\n                    }\n                });\n\n                this.toggleSelection = function(element, index) {\n                    lastClickedIndex = index;\n                    shiftSelectedElements.length = 0;\n\n                    if(this.isElementSelected(element)) {\n                        unselectElement(element);\n                    }\n                    else {\n                        selectElement(element);\n                    }\n                };\n\n                this.toggleSelectAll = function() {\n\n                    if(this.selectedElements.length === this.selectableElements.length){\n                        this.selectedElements.length = 0;\n                    }\n                    else {\n                      angular.forEach(this.selectableElements, function(element) {\n                        if(!self.isElementSelected(element)) {\n                          selectElement(element);\n                          }\n                      });\n                    }\n                };\n\n                this.shiftedClick = function(element, index) {\n                    if(typeof lastClickedIndex !== undefined) {\n                        toggleRangeUpTo(lastClickedIndex, index);\n                    }\n                };\n\n                this.registerElement = function(element, directive) {\n                  this.selectableElements.push(element);\n                };\n\n                this.unregisterElement = function(element) {\n                  var index = this.selectableElements.indexOf(element);\n                  if(index > -1) {\n                      this.selectableElements.splice(index, 1);\n                  }\n\n                  index = this.selectedElements.indexOf(element);\n                  if(index > -1) {\n                      this.selectedElements.splice(index, 1);\n                  }\n                };\n\n                this.areAllElementSelected = function() {\n                  return this.selectedElements.length === this.selectableElements.length\n                     && this.selectedElements.length !== 0;\n                };\n\n                this.isElementSelected = function(element) {\n                    return self.selectedElements.indexOf(element) > -1;\n                };\n\n                function toggleRangeUpTo(firstIndex, lastIndex) {\n\n                    var lastElement = getElementAtIndex(lastIndex),\n                        min = Math.min(firstIndex, lastIndex),\n                        max = Math.max(firstIndex, lastIndex),\n                        element,\n                        i;\n\n                    angular.forEach(shiftSelectedElements, function(element, index) {\n                        unselectElement(element);\n                    });\n\n                    if(self.isElementSelected(lastElement)) {\n                        for(i = min; i <= max; i++) {\n                            element = getElementAtIndex(i);\n                            unselectElement(element);\n                        }\n\n                        lastClickedIndex = lastIndex;\n                        shiftSelectedElements.length = 0;\n                    }\n                    else {\n                        shiftSelectedElements.length = 0;\n                        for(i = min; i <= max; i++) {\n                            element = getElementAtIndex(i);\n                            selectElement(element);\n                            shiftSelectedElements.push(element);\n                        }\n                    }\n                }\n\n                function getElementAtIndex(index) {\n                    return self.selectableElements[index];\n                }\n\n                function selectElement(element) {\n                    if(!self.isElementSelected(element)) {\n                        self.selectedElements.push(element);\n                    }\n                }\n\n                function unselectElement(element) {\n                    var index = self.selectedElements.indexOf(element);\n                    if(index > -1) {\n                        self.selectedElements.splice(index, 1);\n                    }\n                }\n            }]\n        };\n    }])\n    .directive('selectable', ['$parse', function($parse) {\n      return {\n          restrict: 'A',\n          require: ['^selectableSet', '?ngModel'],\n          link: function(scope, element, attr, ctrls) {\n\n              var currentElementGetter = $parse(attr.selectable);\n              var currentElement = currentElementGetter(scope);\n\n              var ctrl = ctrls[0],\n                  modelCtrl = ctrls[1];\n\n              ctrl.registerElement(currentElement);\n\n              scope.$on('$destroy', function() {\n                  ctrl.unregisterElement(currentElement);\n              });\n\n              scope.$watch(function() { return ctrl.isElementSelected(currentElement); }, function() {\n                scope.selected = ctrl.isElementSelected(currentElement);\n                if(modelCtrl) {\n                  modelCtrl.$setViewValue(scope.selected);\n                }\n              });\n\n              element.on('click', function(event) {\n                  scope.$apply(function() {\n                      handleClick(event);\n                  });\n              });\n\n              function handleClick(event) {\n                  if (event.shiftKey) {\n                      ctrl.shiftedClick(currentElement, scope.$index);\n                  }\n                  else if (event.ctrlKey || angular.element(event.target).is('.checkbox')) {\n                      ctrl.toggleSelection(currentElement, scope.$index);\n                  }\n              }\n\n          }\n      };\n  }])\n    .directive('selectBox', function() {\n        return {\n            restrict: 'E',\n            require: '^selectable',\n            replace: true,\n            template: '<span class=\"checkbox\" ng-class=\"{ active: selected }\"></span>'\n        };\n    })\n    .directive('selectAll', function() {\n        return {\n            restrict: 'E',\n            require: '^selectableSet',\n            scope: true,\n            template: '<span class=\"checkbox\" ng-class=\"{ active: allSelected }\" ng-click=\"toggleSelectAll()\"></span>',\n            link: function(scope, element, attr, ctrl) {\n\n                scope.toggleSelectAll = function () {\n                    ctrl.toggleSelectAll();\n                };\n\n                scope.$watchCollection(function() { return ctrl.areAllElementSelected(); }, function() {\n                    scope.allSelected = ctrl.areAllElementSelected();\n                });\n            }\n        };\n    });","'use strict';\n\nangular.module('ev-fdm')\n    .directive('sortableSet', function() {\n        return {\n            restrict: 'A',\n            scope: false,\n            controller: ['$scope', '$parse', '$element', '$attrs', function($scope, $parse, $element, $attrs) {\n                var self = this;\n                this.reverseSort = false;\n                this.sortKey = '';\n\n                $scope.reverseSort = $scope.reverseSort || false;\n\n                var reverseSortGet = $parse($attrs.reverseSort),\n                    reverseSortSet = reverseSortGet.assign,\n                    sortKeyGet = $parse($attrs.sortBy),\n                    sortKeySet = sortKeyGet.assign;\n\n                $scope.$watch(function() {\n                    return reverseSortGet($scope);\n                }, function(newReverseSort) {\n                    self.reverseSort = newReverseSort;\n                });\n\n                $scope.$watch(function() {\n                    return sortKeyGet($scope);\n                }, function(newSortKey) {\n                    self.sortKey = newSortKey;\n                });\n\n                this.sortBy = function(key) {\n                    if(key == this.sortKey) {\n                        this.reverseSort = !this.reverseSort;\n                    }\n                    else {\n                        this.reverseSort = false;\n                        this.sortKey = key;\n                    }\n\n                    if(reverseSortSet) {\n                        reverseSortSet($scope, this.reverseSort);\n                    }\n\n                    if(sortKeySet) {\n                        sortKeySet($scope, this.sortKey);\n                    }\n\n                    $scope.$eval($attrs.sortChange);\n                };\n\n            }]\n        };\n    })\n    .directive('sortable', function() {\n        return {\n            restrict: 'A',\n            scope: false,\n            require: '^sortableSet',\n            link: function(scope, element, attr, ctrl) {\n                var key = attr.sortable;\n                element.addClass('sortable sort');\n\n                scope.$watch(function() { return ctrl.sortKey;}, function() {\n                    setClasses();\n                });\n\n                scope.$watch(function() { return ctrl.reverseSort;}, function() {\n                    setClasses();\n                });\n\n                element.on('click', function() {\n                    scope.$apply(function() {\n                        ctrl.sortBy(key);\n                    });\n                });\n\n                function setClasses() {\n                    if(ctrl.sortKey === key){\n                        element.removeClass('no-sort');\n                        if(ctrl.reverseSort) {\n                            element.removeClass('sort-down').addClass('sort-up');\n                        }\n                        else {\n                            element.removeClass('sort-up').addClass('sort-down');\n                        }\n                    }\n                    else {\n                        element.removeClass('sort-up sort-down').addClass('no-sort');\n                    }\n                }\n            }\n        }\n    });","(function () {\n    'use strict';\n    angular.module('ev-fdm')\n        .directive('evTab', function () {\n            return {\n                restrict: 'E',\n                transclude: true,\n                scope: {},\n                controller: function($scope, $element) {\n                    var panes = $scope.panes = [];\n\n\n                    $scope.select = function(pane) {\n                        angular.forEach(panes, function(pane) {\n                            pane.selected = false;\n                        });\n                        pane.selected = true;\n                    };\n\n\n                    this.addPane = function(pane) {\n                        if (panes.length === 0) { $scope.select(pane); }\n                        panes.push(pane);\n                    };\n\n                    var selectFuture = function (panes) {\n                        var futurePane;\n                        panes.some(function (pane) {\n                            var isSelected = $scope.isShowed(pane);\n                            if (isSelected) {\n                                futurePane = pane;\n                            }\n                            return isSelected;\n                        });\n                       return futurePane;\n                    };\n\n                    this.selectNext = function() {\n                        var selectedIndex = $scope.selectedIndex();\n                        var nextPanes = panes.slice(selectedIndex + 1);\n                        $scope.select(selectFuture(nextPanes) || panes[selectedIndex]);\n                    };\n\n                    this.selectPrevious = function() {\n                        var selectedIndex = $scope.selectedIndex();\n                        var previousPanes = panes.slice(0, selectedIndex).reverse();\n                        $scope.select(selectFuture(previousPanes) || panes[selectedIndex]);\n                    };\n\n                    $scope.selectedIndex = function() {\n                        for (var i = 0; i < panes.length; i++) {\n                            var pane = panes[i];\n\n                            if (pane.selected) {\n                                return i;\n                            }\n                        }\n                    };\n\n                    $scope.isShowed = function (pane) {\n                        return pane.tabShow == null || !!pane.tabShow;\n                    };\n                },\n                template:\n                    '<div class=\"tabbable\" ev-fixed-header refresh-on=\"tab_container\">' +\n                        '<ul class=\"nav nav-tabs ev-header\">' +\n                            '<li ng-repeat=\"pane in panes | filter:isShowed\" ' +\n                                'ng-class=\"{active:pane.selected}\" '+\n                                'tooltip=\"{{pane.tabTitle}}\" tooltip-placement=\"bottom\" tooltip-append-to-body=\"true\">'+\n                                '<a href=\"\" ng-click=\"select(pane); pane.tabClick()\"> ' +\n                                    '<span ng-show=\"pane.tabIcon\" class=\"{{pane.tabIcon}}\"></span> '+\n                                    '<span ng-hide=\"pane.tabIcon\">{{pane.tabTitle}}</span>'+\n                                '</a>' +\n                            '</li>' +\n                        '</ul>' +\n                        '<div class=\"tab-content ev-body\" ng-transclude></div>' +\n                    '</div>',\n                replace: true\n            };\n        })\n        .directive('evPane', function() {\n            return {\n                require: '^evTab',\n                restrict: 'E',\n                transclude: true,\n                scope: {\n                    tabTitle: '@',\n                    tabIcon: '@',\n                    tabClick: '&',\n                    tabShow: '='\n                },\n                link: function(scope, element, attrs, tabsCtrl, transcludeFn) {\n                    tabsCtrl.addPane(scope);\n                    transcludeFn(function(clone, transcludedScope) {\n                        transcludedScope.$selectNext     = tabsCtrl.selectNext;\n                        transcludedScope.$selectPrevious = tabsCtrl.selectPrevious;\n\n                        element.find('.transclude').append(clone);\n                    });\n                },\n                template:\n                    '<div class=\"tab-pane\" ng-class=\"{active: selected}\">' +\n                        '<div class=\"section transclude\"></div>' +\n                    '</div>',\n                replace: true\n            };\n        });\n}) ();","'use strict';\n\nvar module = angular.module('ev-fdm');\n\nmodule.directive('throttle', ['$timeout', function($timeout) {\n\n    return {\n        restrict: 'A',\n        require: 'ngModel',\n        priority: 1,\n        link: function(scope, element, attr, ctrl) {\n\n            var originalSetViewValue = ctrl.$setViewValue,\n                originalViewListeners = angular.copy(ctrl.$viewChangeListeners);\n\n            ctrl.$viewChangeListeners = [];\n\n            var throttleGuard;\n            ctrl.$setViewValue = function(value) {\n                var callViewListeners = ctrl.$modelValue !== value;\n\n                originalSetViewValue.apply(ctrl, [value]);\n\n                if (callViewListeners) {\n                    if(throttleGuard) {\n                        $timeout.cancel(throttleGuard);\n                    }\n\n                    throttleGuard = $timeout(function() {\n                        angular.forEach(originalViewListeners, function(listener) {\n                            try {\n                                listener();\n                            } catch(e) {\n                                $exceptionHandler(e);\n                            }\n                        });\n                    }, 600);\n                }\n\n            };\n        }\n    }\n}]);","'use strict';\n\nangular.module('ev-fdm')\n    .directive('evValue', function () {\n        return {\n            restrict: 'E',\n            replace: true,\n            scope: {\n                value: '=',\n                noValue: '@',\n            },\n            templateUrl: 'value.phtml'\n        };\n    });","'use strict';\n\nfunction FilterServiceFactory($rootScope, $timeout) {\n\n    function FilterService() {\n        \n        this.filters = {};\n\n        var listeners = [];\n        var modifier = null;\n\n        var self = this;\n        $rootScope.$watch(function() { return self.filters; }, function(newFilters, oldFilters) {\n            if(oldFilters === newFilters) {\n                return;\n            }\n\n            $timeout(function() {\n                if(self.modifier) {\n                    self.modifier.call(self, newFilters, oldFilters);\n                }\n                else {\n                    self.callListeners();\n                }\n            }, 0);\n\n        }, true);\n\n        this.setModifier = function(callback) {\n            if(angular.isFunction(callback)) {\n                this.modifier = callback;\n            }\n        };\n\n        this.addListener = function(scope, callback) {\n            if(angular.isFunction(callback)) {          \n                listeners.push(callback);\n\n                scope.$on('$destroy', function() {\n                    self.removeListener(callback);\n                });\n            }\n        };\n\n        this.removeListener = function(callback) {\n            angular.forEach(listeners, function(listener, index) {\n                if(listener === callback) {\n                    listeners.splice(index, 1);\n                }\n            });\n        };\n\n        this.callListeners = function() {\n            var self = this;\n            angular.forEach(listeners, function(listener) {\n                listener(self.filters);\n            })\n        }\n    }\n\n    return new FilterService();\n}\n\nangular.module('ev-fdm')\n    .factory('FilterService', ['$rootScope', '$timeout', FilterServiceFactory]);\n","/* jshint sub: true */\nangular.module('ev-fdm')\n    .factory('Select2Configuration', ['$timeout', function($timeout) {\n\n        return function(dataProvider, formatter, resultModifier, minimumInputLength, key) {\n            var oldQueryTerm = '',\n                filterTextTimeout;\n\n            var config = {\n                minimumInputLength: angular.isDefined(minimumInputLength)\n                    && angular.isNumber(minimumInputLength) ? minimumInputLength : 3,\n                allowClear: true,\n                query: function(query) {\n                    var timeoutDuration = (oldQueryTerm === query.term) ? 0 : 600;\n\n                        oldQueryTerm = query.term;\n\n                        if (filterTextTimeout) {\n                            $timeout.cancel(filterTextTimeout);\n                        }\n\n                    filterTextTimeout = $timeout(function() {\n                        dataProvider(query.term, query.page).then(function (resources){\n\n                            var res = [];\n                            if(resultModifier) {\n                                angular.forEach(resources, function(resource ){\n                                    res.push(resultModifier(resource));\n                                });\n                            }\n\n                            var result = {\n                                results: res.length ? res : resources\n                            };\n\n                            if(resources.pagination &&\n                                resources.pagination['current_page'] < resources.pagination['total_pages']) {\n                                result.more = true;\n                            }\n                            if (key && query.term.length) {\n                                var value = {id: null};\n                                value[key] = query.term;\n                                if (result.results.length) {\n                                    var tmp = result.results.shift();\n                                    result.results.unshift(tmp, value);\n                                } else {\n                                    result.results.unshift(value);\n                                }\n                            }\n                            query.callback(result);\n                        });\n\n                    }, timeoutDuration);\n\n                },\n                formatResult: function(resource, container, query, escapeMarkup) {\n                    return formatter(resource);\n                },\n                formatSelection: function(resource) {\n                    return formatter(resource);\n                },\n                initSelection: function() {\n                    return {};\n                }\n            };\n            return config;\n        };\n    }]);","\nif(typeof(Fanny) == 'undefined') {\n    Fanny = {}\n};\n\nFanny.Utils = {\n    generatedIds : {},\n    generateId : function(prefix) {\n        var id = prefix + Math.random() * 10000;\n        if(typeof(this.generatedIds[id] != 'undefined')) {\n            this.generatedIds[id] = true;\n        } else {\n            id = generateId(prefix);\n        }\n        return id;\n    },\n    convertNumberToString : function(number, nbDecimals, intMinLength) {\n        var thousandsSep = ' ';\n        var decimalSep   = ',';\n        var numberStr    = '';\n        var numberArray  = [];\n        var integer      = '';\n        var decimals     = '';\n        var result       = '';\n        \n        if(typeof(nbDecimals) == 'undefined') {\n            nbDecimals = 2;\n        }\n        \n        numberStr = number + '';\n        numberArray = numberStr.split('.');\n        if(numberArray.length < 1 && numberArray.length > 2) {\n            throw new Error('Invalid number');\n            return false;\n        }\n        \n        integer = numberArray[0];\n        \n        if(numberArray.length == 1) {\n            decimals = '';\n            for(var i = 0; i < nbDecimals; i++) {\n                decimals += '0';\n            }\n        } else {\n            decimals = numberArray[1];\n            if(decimals.length > nbDecimals) {\n                decimals = decimals.substring(0, 2);\n            } else {\n                while(decimals.length < nbDecimals) {\n                    decimals += '0';\n                }\n            }\n        }\n        for(var i = 0; i < integer.length; i++) {\n            if(i % 3 == 0 && i != 0) {\n                result = thousandsSep + result;\n            }\n            result = integer[integer.length - i - 1] + result;\n        }\n        if(result == '') {\n            result = '' + 0;\n        }\n        \n        for(var i = result.length; i < intMinLength; i++) {\n            result = '0' + result;\n        }\n        \n        if(decimals.length > 0) {\n            result += decimalSep + decimals;\n        }\n        return result;\n    },\n    stringToVar : function(string) {\n        if(typeof(string) != 'string') {\n            throw new Error('Not a string');\n            return;\n        }\n        if(!isNaN(string)) {\n            return parseInt(string);\n        }\n        var _exploded = string.split('.');\n        var _result = window;\n        for (var index = 0; index < _exploded.length; index++) {\n            if(_exploded[index].length && typeof(_result[_exploded[index]]) != 'undefined') {\n                _result = _result[_exploded[index]];\n            } else {\n                throw new Error('No corresponding var found for ' + string);\n                return;\n            }\n        }\n        return _result;\n    },\n    formatDate : function(date) {\n        if(!date || typeof(date) != 'object') {\n            return '';\n        }\n        var year = date.getFullYear();\n        var month = this.convertNumberToString(date.getMonth() + 1, 0, 2);\n        var day = this.convertNumberToString(date.getDate(), 0, 2);\n        return year + '-' + month + '-' + day;\n    },\n    Renderers : {\n        date : function(date) {\n            var _date     = null;\n            var _splitted = null;\n            var _obj      = null;\n            if(date && typeof(date) == 'object') {\n                _date = date.date;\n            } else {\n                _date = date;\n            }\n            if(typeof(_date) == 'string' && _date) {\n                _date = _date.split(' ')[0];\n                _splitted = _date.split('-');\n                if (_splitted.length === 3) {\n                    return _splitted[2] + '/' + _splitted[1] + '/' + _splitted[0];\n                }\n                else {\n                    return '';\n                }\n            } else {\n                return '';\n            }\n        },\n        amounts : function(number) {\n            var res = Fanny.Utils.convertNumberToString(number, 2);\n            if(number >= 0) {\n                return res;\n            } else {\n                return $('<span>').addClass('text-orange').html(res)\n            }\n            \n        },\n        money : function(number, row) {\n            var currency = (row && row.currency && row.currency.symbole) ? row.currency.symbole : '€';\n            var res = Fanny.Utils.convertNumberToString(number, 2) + ' ' + currency;\n            if(number >= 0) {\n                return res;\n            } else {\n                return $('<span>').addClass('text-orange').html(res)\n            }\n        },\n        euros : function(number) {\n            var res = Fanny.Utils.convertNumberToString(number, 2) + ' €';\n            if(number >= 0) {\n                return res;\n            } else {\n                return $('<span>').addClass('text-orange').html(res)\n            }\n        },\n        upper : function(string) {\n            if(typeof(string) == 'string') {\n                return string.toUpperCase();\n            } else {\n                return string;\n            }\n        }\n    }\n}","'use strict';\n/*\n    Takes a string in the form 'yyyy-mm-dd hh::mn:ss'\n*/\nangular.module('ev-fdm')\n    .filter('cleanupDate', function() {\n        return function(input) {\n            var res = '';\n            if (input) {\n                var y = input.slice (0,4);\n                var m = input.slice (5,7);\n                var day = input.slice (8,10);\n\n                res = day + '/'+ m + '/' + y;\n            }\n\n            return res;\n        };\n    });","'use strict';\n\n/**\n * Meant to be used for stuff like this:\n * {{ message.isFromTraveller | cssify:{1:'message-traveller', 0:'message-agent'} }}\n * We want to display a css class depending on a given value,\n * and we do not want our controller to store a data for that\n * We can use this filter, and feed it with an object with the matching key,value we want\n */\nangular.module('ev-fdm')\n    .filter('cssify', function() {\n        return function(input, possibilities) {\n            var res = '';\n            if (possibilities)\n            {\n                for (var prop in possibilities) {\n                    if (possibilities.hasOwnProperty(prop)) { \n                        if (input == prop){\n                            res = possibilities[prop];\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return res;\n        };\n    });","angular.module('ev-fdm')\n     .filter('prettySecs', [function() {\n            return function(timeInSeconds) {\n               \tvar numSec = parseInt(timeInSeconds, 10); // don't forget the second param\n\t\t\t    var hours   = Math.floor(numSec / 3600);\n\t\t\t    var minutes = Math.floor((numSec - (hours * 3600)) / 60);\n\t\t\t    var seconds = numSec - (hours * 3600) - (minutes * 60);\n\n\t\t\t    if (hours   < 10) {hours   = \"0\"+hours;}\n\t\t\t    if (minutes < 10) {minutes = \"0\"+minutes;}\n\t\t\t    if (seconds < 10) {seconds = \"0\"+seconds;}\n\t\t\t    var time    = hours+':'+minutes+':'+seconds;\n\t\t\t    return time;\n            };\n    }]);\n","angular.module('ev-fdm')\n     .filter('sum', ['$parse', function($parse) {\n            return function(objects, key) {\n                if (!angular.isDefined(objects)) {\n                    return 0;\n                }\n                var getValue = $parse(key);\n                return objects.reduce(function(total, object) {\n                    var value = getValue(object);\n                    return total +\n                        ((angular.isDefined(value) && angular.isNumber(value)) ? parseFloat(value) : 0);\n                }, 0);\n            };\n    }]);\n","'use strict';\n\nangular.module('ev-fdm')\n    .filter('unsafe', ['$sce', function($sce) {\n        return function(val) {\n            return $sce.trustAsHtml(val);\n        };\n    }]);","'use strict';\n\nvar module = angular.module('ev-fdm');\n\n/**\n * Communication Service\n * Manage the communication for our app\n */\nmodule.service('communicationService', ['$rootScope', function($rootScope) {\n\n    var COMMUNICATION_KEY = 'evfdm-communication';\n\n    /**\n     * Emit an event\n     */\n    var emit = function(eventName, params) {\n        $rootScope.$emit(eventName, params);\n    };\n\n    /**\n     * Listen to an event\n     */\n    var on = function(eventName, callback) {\n        $rootScope.$on(eventName, callback);\n    };\n\n    /**\n     * Set a key/value\n     */\n    var set = function(key, value) {\n        if($rootScope[COMMUNICATION_KEY] === undefined) {\n            $rootScope[COMMUNICATION_KEY] = {};\n        }\n\n        $rootScope[COMMUNICATION_KEY][key] = value;\n    };\n\n    /**\n     * Get a value by key\n     */\n    var get = function(key) {\n        var result = null;\n        if($rootScope[COMMUNICATION_KEY] && $rootScope[COMMUNICATION_KEY][key] !== undefined) {\n            result = $rootScope[COMMUNICATION_KEY][key];\n        }\n\n        return result;\n    };\n\n    var communicationService = {\n        emit: emit,\n        on  : on,\n        set : set,\n        get : get\n    };\n\n    return communicationService;\n}]);","angular.module('ev-fdm')\n.service('DownloadService', ['$document', function($document) {\n   var iframe = null;\n   return {\n       download: function(url) {\n           if(!iframe) {\n               iframe = $document[0].createElement('iframe');\n               iframe.style.display = 'none';\n               $document[0].body.appendChild(iframe);\n           }\n           iframe.src = url;\n       }\n   }\n}]);","'use strict';\n\n// Map that stores the selected filters across pages\nangular.module('ev-fdm').\n    service('FilteringService', ['$location', function ($location) {\n\n        var filters = {};\n\n        return {\n            setSelectedFilter:function (filterName, value){\n                if (value != undefined && value != 'undefined'){\n                    filters[filterName] = value;\n                    // $location.search(filterName, encodeURIComponent(value));\n                }\n                else {\n                    filters[filterName] = '';\n                }\n\n            },\n\n            getSelectedFilter:function (filterName){\n                var res = '';\n\n                if (typeof filters[filterName] != 'undefined' && filters[filterName] != 'undefined') {\n                    res = filters[filterName];\n                }\n\n                return res;\n            },\n\n            getAllFilters:function (){\n                return filters;\n            }\n        }\n    }]\n    );","/**\n * ModalService\n *     Angularization of bootstrap's $.fn.modal into a service\n *     - read template from ng's template cache\n *     - uses ng's $compilation, attaching the provided $scope\n *     - (optional) attach a controller to the view for more advanced modals\n *\n * Usage:\n *     - modalService.open({\n *         .. same as twitter bootstrap options\n *         template:                [html value string],\n *         templateUrl:             [url matching a key in $templateCache],\n *         scope:                   [key values],\n *         parentScope (optional):  [scope will inherit from that scope, $rootScope by default],\n *         controller: (optional):  [that controller will be injected on the view]\n *     })\n *     returns the $dom\n *\n * @author maz\n */\n\nvar module = angular.module('ev-fdm');\n\nvar ModalService = function($rootScope, $templateCache, $compile, $controller) {\n    this.$rootScope = $rootScope;\n    this.$templateCache = $templateCache;\n    this.$compile = $compile;\n    this.$controller = $controller;\n};\n\nModalService.prototype.open = function(options) {\n    // extend and check options given\n    options = this._readOptions(options);\n\n    // get/create the scope\n    var $scope = (options.parentScope || this.$rootScope).$new();\n    $scope = _($scope).extend(options.scope);\n\n    // attach a controller if specified\n    var $controller;\n    if (options.controller) {\n        $controller = this.$controller(options.controller, { $scope: $scope });\n    }\n\n    // create the dom that will feed bs modal service\n    var modalDom = this.$compile(options.template || this.$templateCache.get(options.templateUrl))($scope);\n\n    // attach these to the returned dom el\n    modalDom.$scope = $scope;\n    modalDom.$controller = $controller;\n    // controller has access to the bs dom modal object\n    if ($controller) {\n        $controller.$modal = modalDom;\n    }\n\n    return $(modalDom).modal(options);\n}\n\nModalService.prototype._readOptions = function(options) {\n    // read options, adding defaults\n    options = _({\n        backdrop: true,\n        scope: {},\n        keyboard: true\n    }).extend(options);\n\n    // templateUrl is compulsory\n    if (!options.templateUrl && !options.template) {\n        throw new Error('Either template or templateUrl have to be defined');\n    }\n\n    return options;\n}\n\n// injection\nmodule.service('ModalService', [\n    '$rootScope',\n    '$templateCache',\n    '$compile',\n    '$controller',\n    ModalService\n]);","'use strict';\n\n/* Services */\nvar module = angular.module('ev-fdm');\n\n// Map that stores the selected filters across pages\nmodule.service('NotificationsService', ['$timeout', function($timeout) {\n\n    var self = this;\n    var queue = [];\n    var DEFAULT_DELAY = 5;\n    var TYPES = {\n        SUCCESS : 0,\n        ERROR : 1,\n        INFO : 2,\n        WARNING : 3\n    };\n\n    /**\n     * The notification being displayed\n     */\n    this.activeNotification = null;\n\n    /**\n     * Give this function a notification object with :\n     * {\n     *     text: 'the text you want to display',\n     *     type: the type, a value among the constant in NotificationsService.type\n     *     [delay]: optionnal, the duration in seconds during which you want to display the error\n     *             if -1 : sticky message\n     * }\n     */\n    function add(notification) {\n        if (!notification.type) {\n            notification.type = TYPES.SUCCESS;\n        }\n        queueNotification(notification);\n    }\n\n    /**\n     * For manual removal\n     */\n    function remove(notification) {\n        queue = _(queue).without(notification);\n        next();\n    }\n\n    function next() {\n        if (queue.length) {\n            var notification = queue[0];\n            if (self.activeNotification !== notification) {\n                self.activeNotification = notification;\n                if (notification.delay !== -1) {\n                    // The notification is removed after a while\n                    $timeout(\n                        function() { remove(notification); },\n                        (notification.delay || DEFAULT_DELAY) * 1000\n                    );\n                }\n            }\n        } else {\n            self.activeNotification = null;\n        }\n    }\n\n    function queueNotification(notification) {\n        queue.push(notification);\n        next();\n    }\n\n    // export only these\n    this.add = add;\n    this.remove = remove;\n    this.addError = function(notification) {\n        notification.type = TYPES.ERROR;\n        add(notification);\n    };\n    this.addSuccess = function(notification) {\n        notification.type = TYPES.SUCCESS;\n        add(notification);\n    };\n    this.type = TYPES;\n}]);\n","var module = angular.module('ev-fdm');\n\nmodule.factory('panelFactory', function() {\n    var Panel = function(extensions) {\n        this.blockers = [];\n        _(this).extend(extensions);\n    };\n    Panel.prototype.addBlocker = function(blocker) {\n        this.blockers.push(blocker);\n    };\n    Panel.prototype.removeBlocker = function(blocker) {\n        this.blockers = _(this.blockers).without(blocker);\n    };\n    Panel.prototype.isBlocked = function(silent) {\n        return _(this.blockers).some(function(blocker) {\n            return blocker(silent);\n        });\n    };\n    return {\n        create: function(extensions) {\n            return new Panel(extensions);\n        }\n    };\n});\n\nmodule.service('PanelService', [ '$rootScope', '$http', '$templateCache', '$q', '$injector', '$controller',  'panelManager', 'panelFactory', function($rootScope, $http, $templateCache, $q, $injector, $controller, panelManager, panelFactory) {\n\n    // Identifies all panels\n    var currentId = 1;\n\n    function parseOptions(options) {\n        options = options || {};\n\n        if (!options.template && !options.templateUrl && !options.content) {\n            throw new Error('Should define options.template or templateUrl or content');\n        }\n\n        // Retrieve the last panel\n        var last = panelManager.last();\n\n        /**\n         * Parse the opening options (replace or pushFrom)\n         */\n        if(options.replace) {\n            if(angular.isString(options.replace)) {\n                //We can use 'panel-main' as a special panel name\n                if(options.replace === 'panel-main') {\n                    options.replace = getMainPanel();\n                } else {\n                    options.replace = getPanel(options.replace);\n                }\n            } else if(options.replace === true) {\n                options.replace = last;\n            }\n        } else if (options.pushFrom) {\n            if(angular.isString(options.pushFrom)) {\n                options.pushFrom = getPanel(options.pushFrom);\n            }\n\n            if(options.pushFrom !== null && options.pushFrom != last) {\n                options.replace = panelManager.getNext(options.pushFrom);\n            }\n        }\n\n        if(!options.replace && !options.pushFrom) {\n            options.pushFrom = last;\n        }\n\n        options.panelName = options.panelName || '';\n\n        options.panelClass = options.panelName || '';\n        options.panelClass += ' right';\n\n        options.resolve = options.resolve || {};\n        return options;\n    }\n\n    function getTemplatePromise(options) {\n        return options.content ? $q.when(options.content) :\n            options.template ? $q.when(options.template) :\n            $http.get(options.templateUrl, {\n                cache: $templateCache\n            }).then(function(result) {\n                return result.data;\n            });\n    }\n\n    function getResolvePromises(resolves) {\n        var promises = [];\n        angular.forEach(resolves, function(value) {\n            if (angular.isFunction(value) || angular.isArray(value)) {\n                promises.push($q.when($injector.invoke(value)));\n            }\n        });\n        return promises;\n    }\n\n    function getPromises(options) {\n        return [getTemplatePromise(options)].concat(getResolvePromises(options.resolve));\n    }\n\n    function resolveAll(options) {\n        return $q.all(getPromises(options))\n            .then(function(contentAndLocals) {\n                // variables injected in the controller\n                var locals = {};\n                var i = 1;\n                angular.forEach(options.resolve, function(value, key) {\n                    locals[key] = contentAndLocals[i++];\n                });\n                return {\n                    content: contentAndLocals[0],\n                    locals: locals\n                };\n            });\n    }\n\n    /**\n     * Resolves everything needed to the view (templates, locals)\n     * + creates the controller, scope\n     * + finally creates the view\n     */\n    function createInstance(options, done) {\n        var self = this;\n        var resultDeferred = $q.defer();\n        var openedDeferred = $q.defer();\n\n        var instance = panelFactory.create({\n            panelName : options.panelName,\n            result: resultDeferred.promise,\n            opened: openedDeferred.promise,\n            close: function(result) {\n                if (!instance.isBlocked()) {\n                    var notCancelled = panelManager.dismissChildren(instance, 'parent closed');\n                    if (!notCancelled) {\n                        return false;\n                    }\n                    panelManager.close(instance, options);\n                    panelManager.remove(instance);\n                    resultDeferred.resolve(result);\n                    return true;\n                }\n                return false;\n            },\n            dismiss: function(reason) {\n                if (!instance.isBlocked()) {\n                    var notCancelled = panelManager.dismissChildren(instance, 'parent dismissed');\n                    if (!notCancelled) {\n                      return false;\n                    }\n                    panelManager.close(instance, options);\n                    panelManager.remove(instance);\n                    resultDeferred.reject(reason);\n                    return true;\n                }\n                return false;\n            }\n        });\n\n        resolveAll(options)\n            .then(function(contentAndLocals) {\n\n                // create scope\n                var scope = (options.scope || $rootScope).$new();\n                scope.$close = instance.close;\n                scope.$dismiss = instance.dismiss;\n\n                // fires the controller\n                var controller;\n                if (options.controller) {\n                    var locals = contentAndLocals.locals;\n                    locals.$scope = scope;\n                    locals.$instance = instance;\n                    controller = $controller(options.controller, locals);\n                }\n\n                // add variables required by panelManager\n                options.scope = scope;\n                options.deferred = resultDeferred;\n                options.content = contentAndLocals.content;\n\n                // finally open the view\n                if (options.replace) {\n                    panelManager.replace(options.replace, instance, options);\n                    panelManager.remove(options.replace, options);\n                } else {\n                    panelManager.open(instance, options);\n                }\n            })\n            .then(function() {\n                openedDeferred.resolve(true);\n            }, function() {\n                openedDeferred.resolve(false);\n            });\n\n        return instance;\n    }\n\n    /**\n     * Get a panel instance via his name\n     */\n    function getPanel(panelName) {\n        var panel = panelManager.panels.find(function(_panel) {\n            return _panel.panelName === panelName;\n        });\n\n        return panel || null;\n    }\n\n    /**\n     * Get the main panel instance\n     */\n    function getMainPanel() {\n        var mainPanel = panelManager.panels.first();\n        // var mainPanel = panelManager.panels.find(function(_panel) {\n        //     return _panel.isMain === true;\n        // });\n\n        return mainPanel || null;\n    }\n\n    /**\n     * Return a boolean if either the panel exist or not\n     */\n    function hasPanel(panelName) {\n        return getPanel(panelName) != null;\n    }\n\n    /**\n     * @param {Object} options\n     *        - {Mixed} template / templateUrl / content\n     *        - (optional) {String} controller\n     *        - (optional) {Mixed} scope\n     *        - (optional) {Object} resolve\n     *        - (optional) {String} panelName\n     *        - (optional) {Mixed} pushFrom :\n     *                            + {String} : the panel name\n     *                            + {Object} : the panel instance\n     *        - (optional) {Mixed} replaceAt :\n     *                            + {String} : the panel name\n     *                            + {Object} : the panel instance\n     *                            + {Boolean}: if true replace the last panel\n     *\n     * @return {Object} The panel instance or null if something wrong occured\n     */\n    function open(options) {\n        options = parseOptions(options);\n\n        var instance;\n\n        if (options.replace) {\n            var result = panelManager.dismissChildren(options.replace, 'parent replaced');\n            // some child might have canceled the close\n            if (!result) {\n                return null;\n            }\n        }\n\n        if (options.replace && options.replace.isBlocked()) {\n            return null;\n        }\n\n        // Contains the panel 'depth'\n        options.depth = panelManager.panels.size();\n        instance = createInstance(options);\n\n        // Attach some variables to the instance\n        instance.$$id = currentId++;\n\n        panelManager.push(instance);\n\n        return instance;\n    }\n\n    var panelService = {\n        getPanel : getPanel,\n        hasPanel : hasPanel,\n        open: open,\n        count: function() {\n            return panelManager.size();\n        },\n        dismissChildrenId: function(i) {\n            panelManager.dismissChildrenId(i);\n        },\n        dismissAll: function(reason) {\n            panelManager.dismissAll(reason);\n        },\n        dismissChildren: function(instance, reason) {\n            return panelManager.dismissChildren(instance, reason);\n        }\n    };\n\n    return panelService;\n}]);","// WORK IN PROGRESS\n\n// var module = angular.module('ev-fdm');\n\n// module.factory('Panel', function() {\n\n//     var Panel = function(extensions) {\n//         this.blockers = [];\n//         _(this).extend(extensions);\n//     };\n\n//     Panel.prototype.addBlocker = function(blocker) {\n//         this.blockers.push(blocker);\n//     };\n\n//     Panel.prototype.removeBlocker = function(blocker) {\n//         this.blockers = _(this.blockers).without(blocker);\n//     };\n\n//     Panel.prototype.isBlocked = function(silent) {\n//         return _(this.blockers).some(function(blocker) {\n//             return blocker(silent);\n//         });\n//     };\n\n//     return Panel;\n// });\n\n// module.service('PanelServiceUI', [ '$rootScope', '$compile', '$animate', '$timeout', function($rootScope, $compile, $animate, $timeout) {\n\n//     var STACKED_WIDTH = 15;\n//     var els = {};\n\n//     var Region = function() {\n//         this.updateStacking = function() {\n//             // return $timeout(checkStackingThrottled);\n//         };\n\n//         this.open = function(instance, options) {\n//             instance.$$depth = region.panels.size();\n//             var el = createPlaceholder(instance.$$depth);\n//             var inner = createPanelView(instance, options);\n//             el.html(inner);\n//             els[instance.$$id] = el;\n//             $animate.enter(el, container, panelZero, function() {\n//                 options.scope.$emit('animation-complete');\n//                 $rootScope.$broadcast('module-layout-changed');\n//                 region.updateStacking();\n//             });\n//             el.on('resize', function(event, ui) {\n//                 stylesCache[instance.$$depth + '-' + options.panelClass] = ui.size.width;\n//                 region.updateStacking();\n//             });\n//             region.updateStacking();\n//             return instance;\n//         };\n\n//         this.replace = function(fromInstance, toInstance, options) {\n//             if (typeof(els[fromInstance.$$id]) != 'undefined') {\n//                 var el = els[fromInstance.$$id];\n//                 toInstance.$$depth = region.panels.size() - 1;\n//                 var inner = createPanelView(toInstance, options);\n//                 el.html(inner);\n//                 els[toInstance.$$id] = el;\n//                 delete els[fromInstance.$$id];\n//                 region.updateStacking();\n//                 return toInstance;\n//             } else {\n//                 return region.open(toInstance, options);\n//             }\n//         };\n\n//         this.close = function(instance) {\n//             if (typeof(els[instance.$$id]) != 'undefined') {\n//                 var el = els[instance.$$id];\n//                 $animate.leave(el, function() {\n//                     delete els[instance.$$id];\n//                     region.updateStacking();\n//                 });\n//                 region.updateStacking();\n//             }\n//         };\n\n//         this.remove = function(instance) {\n//             // TODO\n\n//             // var i = this.panels.indexOf(instance);\n//             // if (i > -1) {\n//             //     this.panels.splice(i, 1);\n//             // }\n//             // return i;\n//         };\n//     };\n\n//     var region = new Region();\n\n//     function getEl(instance) {\n//         if (els[instance.$$id]) {\n//             return els[instance.$$id];\n//         } else {\n//             return null;\n//         }\n//     }\n\n//     function getStylesFromCache(instance, options) {\n//         var savedWidth = stylesCache[instance.$$depth + '-' + options.panelClass];\n//         if (savedWidth) {\n//             return 'width: ' + savedWidth + 'px;';\n//         } else {\n//             return '';\n//         }\n//     }\n\n//     function stack(fromInstanceIndex) {\n//         for (var i = 0; i < region.panels.size(); i++) {\n//             var shouldStack = (i < fromInstanceIndex);\n//             var instance = region.at(i);\n//             var el = getEl(instance);\n//             if (instance.$$stacked && !shouldStack) {\n//                 delete instance.$$actualWidth;\n//                 $animate.removeClass(el, 'stacked');\n//             } else if (!instance.$$stacked && shouldStack) {\n//                 instance.$$actualWidth = getEl(instance).outerWidth();\n//                 $animate.addClass(el, 'stacked');\n//             }\n//             instance.$$stacked = shouldStack;\n//         }\n//     }\n\n//     function checkStacking() {\n//         var maxWidth = $(window).innerWidth() - 100;\n//         for (var i = 0; i < region.panels.size(); i++) {\n//             var j = 0;\n//             var totalWidth = _(region.panels).reduce(function(memo, instance) {\n//                 if (j++ < i) {\n//                     return memo + STACKED_WIDTH;\n//                 } else {\n//                     var el = getEl(instance);\n//                     if (!el) { return memo; }\n//                     if (instance.$$stacked) { return memo + instance.$$actualWidth; }\n//                     var width = el.outerWidth();\n//                     if (width < 50) {\n//                         // most probably before animation has finished landing\n//                         // we neeed to anticipate a final w\n//                         return memo + 300;\n//                     } else {\n//                         return memo + width;\n//                     }\n//                 }\n//             }, 0);\n//             if (totalWidth < maxWidth) {\n//                 return stack(i);\n//             }\n//         }\n//         // stack all\n//         stack(region.panels.size() - 1);\n//     }\n\n//     function createPlaceholder(depth) {\n//         var isMain = depth === 1;\n//         return angular.element('<div ' +\n//             'class=\"panel-placeholder ' + (isMain ? 'panel-main' : '') + '\" ' +\n//             'style=\"z-index:' + (2000 + depth) + ';\"></div>');\n//     }\n\n//     function createPanelView(instance, options) {\n//         var inner = angular.element(options.content);\n//         inner.attr('style', getStylesFromCache(instance, options));\n//         inner.attr('right-panel-window', true);\n//         options.scope.panelClass = options.panelClass;\n//         return $compile(inner)(options.scope);\n//     }\n\n//     var checkStackingThrottled = _(checkStacking).debounce(50);\n\n//     $(window).on('resize', function() {\n//         region.updateStacking();\n//     });\n\n//     var stylesCache = window.stylesCache = {};\n//     var container = angular.element('.lisette-module-region.right');\n//     var panelZero = container.find('.panel-zero');\n\n\n//     return region;\n// }]);\n\n// module.service('PanelService', ['$rootScope', '$http', '$templateCache', '$q', '$injector', '$controller',  'PanelServiceUI', 'Panel',\n//                         function($rootScope, $http, $templateCache, $q, $injector, $controller, panelServiceUI, Panel) {\n\n//     var panels = [];\n\n//     var openingTypes = {\n//         PUSH    : 1,       // Creates a new panel after the others\n//         REPLACE : 2        // Replace the panel if it already exists, and dismiss its children\n//     };\n//     var defaultOpeningType = openingTypes.PUSH;\n//     var STACKED_WIDTH = 15;\n\n//     /**\n//      * HELPERS\n//      */\n\n//     /**\n//      * Get a panel with his name\n//      * @param  {String} panelName the panel name\n//      * @return {Object}           either the panel or null\n//      */\n//     function getPanel(panelName) {\n//         var panel = _(this.panels).where({\n//             panelName: panelName\n//         });\n\n//         if(panel) {\n//             return _(panel).last();\n//         }\n\n//         return null;\n//     }\n\n//     /**\n//      * Return true if we have this panel, false otherwise\n//      * @param  {String}  panelName the panel name\n//      * @return {Boolean}           if we have this panel or not\n//      */\n//     function hasPanel(panelName) {\n//         return getPanel(panelName) !== null;\n//     }\n\n//     function _isEmpty() {\n//         return panels.length === 0;\n//     }\n\n//     function _remove(panel) {\n//         var i = panels.indexOf(panel);\n//         if (i > -1) {\n//             panels.splice(i, 1);\n//         }\n\n//         return i;\n//     }\n\n//     function _each() {\n//         return this.panels.each.apply(this.panels, arguments);\n//     }\n\n//     function _getNextPanel(panel) {\n//         var i = panels.indexOf(panel);\n//         if (i < panels.length - 1) {\n//             return panels[i + 1];\n//         } else {\n//             return null;\n//         }\n//     }\n\n//     function _getNextPanels(panel) {\n//         var i = panels.indexOf(panel);\n//         if (i > -1 && i < panels.length - 1) {\n//             return panels.slice(i + 1)\n//         } else {\n//             return [];\n//         }\n//     }\n\n//     /**\n//      * Helper to parse the options\n//      * @param  {Object} options the options(todo list them)\n//      * @return {Object}         the options formatted\n//      */\n//     function _parseOptions(options) {\n//         if (!options.template && !options.templateUrl && !options.content) {\n//             throw new Error('Should define options.template or templateUrl or content');\n//         }\n\n//         if (!openingTypes[options.openingType]){\n//             options.openingType = defaultOpeningType;\n//         }\n//         options.panelName = options.panelClass || '';\n\n//         options.panelClass = options.panelClass || '';\n//         options.panelClass += ' right';\n\n//         options.resolve = options.resolve || {};\n\n//         // We generate our id\n//         options.$$id = panels.length + 1;\n\n//         return options;\n//     }\n\n//     function getTemplatePromise(options) {\n//         return options.content ? $q.when(options.content) :\n//             options.template ? $q.when(options.template) :\n//             $http.get(options.templateUrl, {\n//                 cache: $templateCache\n//             }).then(function(result) {\n//                 return result.data;\n//             });\n//     }\n\n//     function getResolvePromises(resolves) {\n//         var promises = [];\n//         angular.forEach(resolves, function(value) {\n//             if (angular.isFunction(value) || angular.isArray(value)) {\n//                 promises.push($q.when($injector.invoke(value)));\n//             }\n//         });\n//         return promises;\n//     }\n\n//     function getPromises(options) {\n//         return [getTemplatePromise(options)].concat(getResolvePromises(options.resolve));\n//     }\n\n//     function resolveAll(options) {\n//         return $q.all(getPromises(options))\n//             .then(function(contentAndLocals) {\n//                 // variables injected in the controller\n//                 var locals = {};\n//                 var i = 1;\n//                 angular.forEach(options.resolve, function(value, key) {\n//                     locals[key] = contentAndLocals[i++];\n//                 });\n//                 return {\n//                     content: contentAndLocals[0],\n//                     locals: locals\n//                 };\n//             });\n//     }\n\n//     /**\n//      * Resolves everything needed to the view (templates, locals)\n//      * + creates the controller, scope\n//      * + finally creates the view\n//      */\n//     function createInstance(region, options, done) {\n//         var resultDeferred = $q.defer();\n//         var openedDeferred = $q.defer();\n\n//         var instance = new Panel({\n//             panelName : options.panelName,\n//             result: resultDeferred.promise,\n//             opened: openedDeferred.promise,\n//             close: function(result) {\n//                 if (!instance.isBlocked()) {\n//                     var notCancelled = dismissChildren(instance, 'parent closed');\n//                     if (!notCancelled) {\n//                         return false;\n//                     }\n\n//                     region.close(instance, options);\n//                     region.remove(instance);\n\n//                     resultDeferred.resolve(result);\n//                     return true;\n//                 }\n//                 return false;\n//             },\n//             dismiss: function(reason) {\n//                 if (!instance.isBlocked()) {\n//                     var notCancelled = dismissChildren(instance, 'parent dismissed');\n//                     if (!notCancelled) {\n//                       return false;\n//                     }\n//                     region.close(instance, options);\n//                     region.remove(instance);\n\n//                     resultDeferred.reject(reason);\n\n//                     return true;\n//                 }\n//                 return false;\n//             }\n//         });\n\n//         resolveAll(options)\n//             .then(function(contentAndLocals) {\n\n//                 // create scope\n//                 var scope = (options.scope || $rootScope).$new();\n//                 scope.$close = instance.close;\n//                 scope.$dismiss = instance.dismiss;\n\n//                 // fires the controller\n//                 var controller;\n//                 if (options.controller) {\n//                     var locals = contentAndLocals.locals;\n//                     locals.$scope = scope;\n//                     locals.$instance = instance;\n//                     controller = $controller(options.controller, locals);\n//                 }\n\n//                 // add variables required by regions\n//                 options.scope = scope;\n//                 options.deferred = resultDeferred;\n//                 options.content = contentAndLocals.content;\n\n//                 // finally open the view\n//                 if (options.replace) {\n//                     region.replace(options.replace, instance, options);\n//                     region.remove(options.replace, options);\n//                 } else {\n//                     region.open(instance, options);\n//                 }\n//             })\n//             .then(function() {\n//                 openedDeferred.resolve(true);\n//             }, function() {\n//                 openedDeferred.resolve(false);\n//             });\n\n//         return instance;\n//     }\n\n//     function dismissChildrens(panel, reason) {\n//         var childrens = _getNextPanels(panel);\n//         var i = childrens.length -1;\n\n//         for (; i >= 0; i--) {\n//             var child  = childrens[i];\n//             var result = child.dismiss(reason);\n//             if (!result) {\n//                 return false;\n//             }\n\n//         }\n\n//         return true;\n//     }\n\n//     /**\n//      * Dismiss all panels except the first one (the main list)\n//      */\n//     function dismissAll(reason) {\n//         if(panels.length >= 2) {\n//             dismissChildrens(panels[1], reason);\n//         }\n//     }\n\n//     /**\n//      * Open a new panel\n//      */\n//     function open(options) {\n//         options = _parseOptions(options);\n//         var  lastPanel = _(panels).last();\n\n//         if (options.push && !options.pushFrom) {\n//             options.pushFrom = lastPanel;\n//         }\n\n//         if (options.pushFrom && options.pushFrom != lastPanel) {\n//             options.replace = _getNextPanel(options.pushFrom);\n//             if (options.replace) {\n//                 var result = _dismissChildrens(options.replace, 'parent replaced');\n//                 // some child might have canceled the close\n//                 if (!result) {\n//                     return false;\n//                 }\n//             }\n//         }\n\n//         if (!options.push && !_isEmpty()) {\n//             options.replace = lastPanel;\n//         }\n\n//         if (options.replace && options.replace.isBlocked()) {\n//             return false;\n//         }\n\n//         var panel = createInstance(panelServiceUI, options);\n//         panels.push(panel);\n\n//         return panel;\n//     }\n\n\n\n//     /**\n//      * Our panel service.\n//      * @type {Object}\n//      */\n//     var PanelService = {\n//         panels: panels,\n//         openingTypes: openingTypes,\n//         getPanel: getPanel,\n//         hasPanel: hasPanel,\n//         open: open,\n//         dismissChildrens: dismissChildrens,\n//         dismissAll: dismissAll\n//     };\n\n//     return PanelService;\n// }]);","var module = angular.module('ev-fdm');\n\nvar SidonieModalService = function($modal, $animate, $log) {\n\n    // main object containing all opened modals\n    var regions = {};\n    regions[ SidonieModalService.REGION_RIGHT ] = { multi: false, opened: [ ] };\n    regions[ SidonieModalService.REGION_MIDDLE ] = { multi: false, opened: [ ] };\n\n\n    // --------------------------------------------------------\n    // 'PUBLIC' FUNCTIONS\n    // --------------------------------------------------------\n\n    /**\n     * Makes sure that:\n     * - the current opened popup in that region is not locked for edition\n     * - the current opened popup is not already of that type (in that case, do not open a new popup)\n     *\n     * @param  region\n     * @param  modalType\n     * @param  options\n     * @return the modal instance if success, false if cancelled by a locked popup\n     */\n    function open(region, modalType, options) {\n        var regionSpecs = getRegionSpecs(region);\n        var isMulti = regionSpecs.multi;\n        var openedModals = regionSpecs.opened;\n\n        if (!options.windowClass) {\n            options.windowClass = ' fade ';\n        }\n        options.windowClass += ' ' + region;\n        if (!options.templateUrl && !options.template) {\n            options.templateUrl = modalType + '.phtml';\n        }\n\n        options.backdrop = (region == SidonieModalService.REGION_MIDDLE);\n\n        if (isMulti) {\n            throw new Error('Multi not implemented yet');\n        } else {\n            if (openedModals.length) {\n                var openedModal = openedModals[openedModals.length - 1];\n                // current opened modal cannot be closed / updated\n                if (openedModal.status == SidonieModalService.STATUS_LOCKED) {\n                    $log.warn('Open modal aborted due to ' + openedModal.sidonieModalType + '\\'s locked status');\n                    highlightModal(openedModal);\n                    return false;\n                // current opened modal has to be replaced\n                } else if (openedModal.sidonieModalType != modalType) {\n                    // close and open a new one\n                    openedModal.modal('hide');\n                    var modal = $modal.open(options);\n                    modal.sidonieModalType = modalType;\n                    modal.result.finally(handleModalClosing(region, modal));\n                    regionSpecs.opened = [ modal ];\n                    return modal;\n                // current opened modal can be kept and content updated\n                } else {\n                    return openedModal;\n                }\n            } else {\n                // simply open a new popup\n                var modal = $modal.open(options);\n                modal.sidonieModalType = modalType;\n                modal.result.finally(handleModalClosing(region, modal));\n                regionSpecs.opened = [ modal ];\n                return modal;\n            }\n        }\n    }\n\n    /**\n     * Closes all currently opened modals, making sure\n     * they are ALL not locked\n     * @return true if success, locked popup if not\n     */\n    function closeAll() {\n        // check if all popups are ready to be closed\n        var cancelled = false;\n        angular.forEach(regions, function(regionSpecs, region) {\n            angular.forEach(regionSpecs.opened, function(modal) {\n                if (cancelled) return;\n                if (modal.status == SidonieModalService.STATUS_LOCKED) {\n                    highlightModal(modal);\n                    $log.warn('Open modal aborted due to ' + modal.sidonieModalType + '\\'s locked status');\n                    cancelled = modal;\n                }\n            });\n        });\n        if (cancelled) return cancelled;\n        // actually close all the popups\n        angular.forEach(regions, function(regionSpecs, region) {\n            angular.forEach(regionSpecs.opened, function(modal) {\n                try {\n                    modal.close();\n                } catch(e) {}\n            });\n        });\n        return true;\n    }\n\n    /**\n     * Returns the latest modal of that region\n     */\n    function get(region, modalType) {\n        var regionSpecs = getRegionSpecs(region);\n        if (regionSpecs.modals.length) {\n            var modal = regionSpecs.modals[regionSpecs.modals.length - 1];\n            if (!modalType || modal.sidonieModalType == modalType) {\n                return modal;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    // --------------------------------------------------------\n    // 'PRIVATE' FUNCTIONS\n    // --------------------------------------------------------\n\n    function getRegionSpecs(region) {\n        var regionSpecs = regions[region];\n        if (typeof(regionSpecs) == 'undefined') {\n            throw new Error('Unknown region ' + region);\n        }\n        return regionSpecs;\n    }\n\n    function handleModalClosing(region, modal) {\n        return function(result) {\n            var regionSpecs = getRegionSpecs(region);\n            angular.forEach(regionSpecs.opened, function(_modal) {\n                if (modal == _modal) {\n                    regionSpecs.opened = _(regionSpecs.opened).without(modal);\n                }\n            });\n        }\n    }\n\n    function highlightModal(modal) {\n        $animate.addClass(modal, 'modal-locked', function() {\n            $animate.removeClass(modal, 'modal-locked');\n        });\n    }\n\n    return {\n        open: open,\n        openRight: function(modalType, options) {\n            open(SidonieModalService.REGION_RIGHT, modalType, options);\n        },\n        openMiddle: function(modalType, options) {\n            open(SidonieModalService.REGION_MIDDLE, modalType, options);\n        },\n        get: get,\n        closeAll: closeAll\n    }\n}\n\nSidonieModalService.STATUS_LOCKED = 'locked';\nSidonieModalService.REGION_RIGHT = 'right';\nSidonieModalService.REGION_MIDDLE = 'middle';\n\n\nmodule.service('SidonieModalService', [ '$modal', '$animate', '$log', SidonieModalService ]);","'use strict';\n\nvar module = angular.module('ev-fdm');\n\nmodule.service('SortService', [function() {\n    var currentSortValue = '';\n    var isReverse = false;\n\n    var getCurrentSort = function() {\n        return currentSortValue;\n    }\n    \n    var sortBy = function(sortValue) {\n        if (sortValue == currentSortValue)\n            isReverse = !isReverse;\n        else {\n            currentSortValue = sortValue;\n        }\n        return this;\n    };\n\n    var getSortCSS = function(value) {\n        var res = 'sort ';\n        if (value == currentSortValue) {\n            if (isReverse)\n                res += 'sort-up';\n            else\n                res += 'sort-down';\n        }\n        else\n            res += 'no-sort';\n        return res;\n    }\n\n    var setReverse = function(reverse) {\n        isReverse = reverse;\n    };\n    var isReverse = function() {\n        return isReverse;\n    };\n\n    return {\n        'sortBy'        : sortBy,\n        'getSortCSS'    : getSortCSS,\n        'getCurrentSort': getCurrentSort,\n        'setReverse'    : setReverse,\n        'isReverse'     : isReverse\n    }\n}]);","'use strict';\n\n/* Services */\nvar module = angular.module('ev-fdm');\n\nvar AbstractAutocompleteStorage = function (AbstractStorage, $timeout) {\n    _.extend (this, AbstractStorage);\n    this.AbstractStorage = AbstractStorage;\n    this.$timeout = $timeout;\n}\n\nAbstractAutocompleteStorage.prototype.generateAutocompleteConfig = function (searchCallback, matchingCallback, minLength) {\n    var me = this;\n\n    var filterTextTimeout;\n    return {\n        minimumInputLength: minLength,\n        allowClear: true,\n        initSelection: function() {\n            return '';\n        },\n        query: function(q) {\n            var res = [],\n                searchParam = q.term;\n\n            if (filterTextTimeout) {\n                me.$timeout.cancel(filterTextTimeout);\n            }\n\n            // Fetches the result from the data store\n            filterTextTimeout = me.$timeout(function() {\n                searchCallback.call(me, searchParam.toUpperCase()).then(function (result){\n                        var res = matchingCallback (result);\n                        q.callback ({ results : res });\n                    }\n                );\n            }, 600);\n\n        }\n    };\n}\n\n// Demonstrate how to register services\n// In this case it is a simple value service.\nmodule.service('AbstractAutocompleteStorage', ['Storage', '$timeout', AbstractAutocompleteStorage]);\n","'use strict';\n\nfunction AjaxStorage($http, $q, $cacheFactory, $log) {\n\n    var httpCache = $cacheFactory('customHttpCache');\n\n    function launchRequest(options) {\n        \n        if(options.cache) {\n            var key = JSON.stringify(options),\n                cached = httpCache.get(key);\n\n            if(cached) {\n                return cached;\n            }\n        }\n\n        // Add the request id... Ah, history...\n        options.id = Fanny.Utils.generateId ('proxy:request:');\n        var requestConfig = {\n            url         : '/backoffice/common/xhr',\n            method      : 'POST',\n            responseType: 'json',\n            headers     : {\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n            },\n            data: options\n        };\n\n        // We have to use then instead of success/error since they prevent from changing the value in the promise\n        // We don't treat the error case since the server always returns a 200 status code\n        var promise = $http(requestConfig)\n            .then(function(response) {\n\n                // php's xhr is not really consistent, let's be more \n                if (!response.data.success) {\n                    $log.warn(response.data.error, response.data.errors);\n                    return $q.reject(response.data.result[options.id]);\n                }\n\n                return response.data.result[options.id].data;\n            });\n\n        if(options.cache) {\n            httpCache.put(key, promise);\n        }\n\n        return promise;\n    }\n\n    return {\n        launchRequest: launchRequest\n    }\n\n}\n\nangular.module('ev-fdm')\n    .service('AjaxStorage', ['$http', '$q', '$cacheFactory', '$log', AjaxStorage]);\n","angular.module('ev-fdm')\n    .factory('RestangularStorage', ['Restangular', function(restangular) {\n\n        function RestangularStorage(resourceName, defaultEmbed) {\n            this.restangular = restangular;\n            this.resourceName = resourceName;\n            this.defaultEmbed = defaultEmbed || [];\n        }\n\n        RestangularStorage.buildSortBy = function(sortKey, reverseSort) {\n            var sortDir = reverseSort ? 'DESC' : 'ASC';\n            return sortKey + ':' + sortDir;\n        };\n\n        RestangularStorage.buildEmbed = function(embed) {\n            return embed.join(',');\n        };\n\n        RestangularStorage.buildFilters = function(filters) {\n            var res = {};\n\n            angular.forEach(filters, function(filter, filterKey) {\n\n                if(angular.isObject(filter) && angular.isDefined(filter.uuid)) {\n                    res[filterKey + '.uuid'] = filter.uuid;\n                }\n                else if(angular.isObject(filter) && angular.isDefined(filter.id)) {\n                    res[filterKey + '.id'] = filter.id;\n                }\n                else if(angular.isArray(filter) && filter.length > 0) {\n                  res[filterKey] = filter.join(',');\n                }\n                else if(angular.isDate(filter)) {\n                    res[filterKey] = filter.toISOString();\n                }\n                else if(angular.isDefined(filter) && filter !== '' && filter !== null) {\n                    res[filterKey] = filter;\n                }\n\n            });\n\n            return res;\n        };\n\n        RestangularStorage.prototype.getList = function(page, embed, filters, sortKey, reverseSort) {\n            var parameters = {};\n\n            if(angular.isNumber(page) && page > 0) {\n                parameters.page = page;\n            }\n\n            if(angular.isArray(embed) && embed.length) {\n                parameters.embed = RestangularStorage.buildEmbed(embed.concat(this.defaultEmbed));\n            }\n            else if(this.defaultEmbed.length) {\n                parameters.embed = RestangularStorage.buildEmbed(this.defaultEmbed);\n            }\n            \n            if(sortKey) {\n                parameters.sortBy = RestangularStorage.buildSortBy(sortKey, reverseSort);\n            }\n\n            if(filters) {\n                filters = RestangularStorage.buildFilters(filters);\n                angular.extend(parameters, filters);\n            }\n\n            return this.restangular.all(this.resourceName).getList(parameters);\n        };\n\n\n        RestangularStorage.prototype.getById = function(id, embed) {\n            var parameters = {};\n\n            if(angular.isArray(embed) && embed.length) {\n                parameters.embed = RestangularStorage.buildEmbed(embed.concat(this.defaultEmbed));\n            }\n            else if(this.defaultEmbed.length) {\n                parameters.embed = RestangularStorage.buildEmbed(this.defaultEmbed);\n            }\n\n            return this.restangular.one(this.resourceName, id).get(parameters);\n        };\n\n        RestangularStorage.prototype.update = function(element, embed) {\n            var parameters = {};\n\n            if(angular.isArray(embed) && embed.length) {\n                parameters.embed = RestangularStorage.buildEmbed(embed.concat(this.defaultEmbed));\n            }\n            else if(this.defaultEmbed.length) {\n                parameters.embed = RestangularStorage.buildEmbed(this.defaultEmbed);\n            }\n\n            return element.put(parameters);\n        };\n\n        RestangularStorage.prototype.create = function(element, embed) {\n            var parameters = {};\n\n            if(angular.isArray(embed) && embed.length) {\n                parameters.embed = RestangularStorage.buildEmbed(embed.concat(this.defaultEmbed));\n            }\n            else if(this.defaultEmbed.length) {\n                parameters.embed = RestangularStorage.buildEmbed(this.defaultEmbed);\n            }\n\n            return this.restangular.all(this.resourceName).post(element, parameters);\n        };\n\n        RestangularStorage.prototype.delete = function(element) {\n            return element.remove();\n        };\n\n        RestangularStorage.prototype.save = function(element, embed) {\n            var parameters = {};\n\n            if(angular.isArray(embed) && embed.length) {\n                parameters.embed = RestangularStorage.buildEmbed(embed.concat(this.defaultEmbed));\n            }\n            else if(this.defaultEmbed.length) {\n                parameters.embed = RestangularStorage.buildEmbed(this.defaultEmbed);\n            }\n\n            return element.save(parameters);\n        };\n\n        RestangularStorage.prototype.getNew = function() {\n            return this.restangular.one(this.resourceName);\n        };\n\n\n        return RestangularStorage;\n    }]);","'use strict';\n\nvar module = angular.module('ev-fdm');\n\nfunction Storage(AjaxStorage) {\n\n        return {\n\n            get: function(options) {\n                return AjaxStorage.launchRequest(options);\n            }\n\n        }\n}\n\nmodule.service('Storage', ['AjaxStorage', Storage]);","'use strict';\n\n/* Start angularLocalStorage */\n\nvar angularLocalStorage = angular.module('LocalStorageModule', []);\n\n// You should set a prefix to avoid overwriting any local storage variables from the rest of your app\n// e.g. angularLocalStorage.constant('prefix', 'youAppName');\nangularLocalStorage.value('prefix', 'ls');\n// Cookie options (usually in case of fallback)\n// expiry = Number of days before cookies expire // 0 = Does not expire\n// path = The web path the cookie represents\nangularLocalStorage.constant('cookie', { expiry:30, path: '/'});\nangularLocalStorage.constant('notify', { setItem: true, removeItem: false} );\n\nangularLocalStorage.service('localStorageService', [\n  '$rootScope',\n  'prefix',\n  'cookie',\n  'notify',\n  function($rootScope, prefix, cookie, notify) {\n\n  // If there is a prefix set in the config lets use that with an appended period for readability\n  //var prefix = angularLocalStorage.constant;\n  if (prefix.substr(-1)!=='.') {\n    prefix = !!prefix ? prefix + '.' : '';\n  }\n\n  // Checks the browser to see if local storage is supported\n  var browserSupportsLocalStorage = function () {\n    try {\n        return ('localStorage' in window && window['localStorage'] !== null);\n    } catch (e) {\n        $rootScope.$broadcast('LocalStorageModule.notification.error',e.message);\n        return false;\n    }\n  };\n\n  // Directly adds a value to local storage\n  // If local storage is not available in the browser use cookies\n  // Example use: localStorageService.add('library','angular');\n  var addToLocalStorage = function (key, value) {\n\n    // If this browser does not support local storage use cookies\n    if (!browserSupportsLocalStorage()) {\n      $rootScope.$broadcast('LocalStorageModule.notification.warning','LOCAL_STORAGE_NOT_SUPPORTED');\n      if (notify.setItem) {\n        $rootScope.$broadcast('LocalStorageModule.notification.setitem', {key: key, newvalue: value, storageType: 'cookie'});\n      }\n      return addToCookies(key, value);\n    }\n\n    // Let's convert undefined values to null to get the value consistent\n    if (typeof value == \"undefined\") value = null;\n\n    try {\n      if (angular.isObject(value) || angular.isArray(value)) {\n          value = angular.toJson(value);\n      }\n      localStorage.setItem(prefix+key, value);\n      if (notify.setItem) {\n        $rootScope.$broadcast('LocalStorageModule.notification.setitem', {key: key, newvalue: value, storageType: 'localStorage'});\n      }\n    } catch (e) {\n      $rootScope.$broadcast('LocalStorageModule.notification.error',e.message);\n      return addToCookies(key, value);\n    }\n    return true;\n  };\n\n  // Directly get a value from local storage\n  // Example use: localStorageService.get('library'); // returns 'angular'\n  var getFromLocalStorage = function (key) {\n    if (!browserSupportsLocalStorage()) {\n      $rootScope.$broadcast('LocalStorageModule.notification.warning','LOCAL_STORAGE_NOT_SUPPORTED');\n      return getFromCookies(key);\n    }\n\n    var item = localStorage.getItem(prefix+key);\n    if (!item) return null;\n    if (item.charAt(0) === \"{\" || item.charAt(0) === \"[\") {\n        return angular.fromJson(item);\n    }\n    return item;\n  };\n\n  // Remove an item from local storage\n  // Example use: localStorageService.remove('library'); // removes the key/value pair of library='angular'\n  var removeFromLocalStorage = function (key) {\n    if (!browserSupportsLocalStorage()) {\n      $rootScope.$broadcast('LocalStorageModule.notification.warning','LOCAL_STORAGE_NOT_SUPPORTED');\n       if (notify.removeItem) {\n        $rootScope.$broadcast('LocalStorageModule.notification.removeitem', {key: key, storageType: 'cookie'});\n      }\n      return removeFromCookies(key);\n    }\n\n    try {\n      localStorage.removeItem(prefix+key);\n      if (notify.removeItem) {\n        $rootScope.$broadcast('LocalStorageModule.notification.removeitem', {key: key, storageType: 'localStorage'});\n      }\n    } catch (e) {\n      $rootScope.$broadcast('LocalStorageModule.notification.error',e.message);\n      return removeFromCookies(key);\n    }\n    return true;\n  };\n\n  // Return array of keys for local storage\n  // Example use: var keys = localStorageService.keys()\n  var getKeysForLocalStorage = function () {\n\n    if (!browserSupportsLocalStorage()) {\n      $rootScope.$broadcast('LocalStorageModule.notification.warning','LOCAL_STORAGE_NOT_SUPPORTED');\n      return false;\n    }\n\n    var prefixLength = prefix.length;\n    var keys = [];\n    for (var key in localStorage) {\n      // Only return keys that are for this app\n      if (key.substr(0,prefixLength) === prefix) {\n        try {\n          keys.push(key.substr(prefixLength))\n        } catch (e) {\n          $rootScope.$broadcast('LocalStorageModule.notification.error',e.Description);\n          return [];\n        }\n      }\n    }\n    return keys;\n  };\n\n  // Remove all data for this app from local storage\n  // Example use: localStorageService.clearAll();\n  // Should be used mostly for development purposes\n  var clearAllFromLocalStorage = function () {\n\n    if (!browserSupportsLocalStorage()) {\n      $rootScope.$broadcast('LocalStorageModule.notification.warning','LOCAL_STORAGE_NOT_SUPPORTED');\n      return clearAllFromCookies();\n    }\n\n    var prefixLength = prefix.length;\n\n    for (var key in localStorage) {\n      // Only remove items that are for this app\n      if (key.substr(0,prefixLength) === prefix) {\n        try {\n          removeFromLocalStorage(key.substr(prefixLength));\n        } catch (e) {\n          $rootScope.$broadcast('LocalStorageModule.notification.error',e.message);\n          return clearAllFromCookies();\n        }\n      }\n    }\n    return true;\n  };\n\n  // Checks the browser to see if cookies are supported\n  var browserSupportsCookies = function() {\n    try {\n      return navigator.cookieEnabled ||\n        (\"cookie\" in document && (document.cookie.length > 0 ||\n        (document.cookie = \"test\").indexOf.call(document.cookie, \"test\") > -1));\n    } catch (e) {\n      $rootScope.$broadcast('LocalStorageModule.notification.error',e.message);\n      return false;\n    }\n  };\n\n  // Directly adds a value to cookies\n  // Typically used as a fallback is local storage is not available in the browser\n  // Example use: localStorageService.cookie.add('library','angular');\n  var addToCookies = function (key, value) {\n\n    if (typeof value == \"undefined\") return false;\n\n    if (!browserSupportsCookies()) {\n      $rootScope.$broadcast('LocalStorageModule.notification.error','COOKIES_NOT_SUPPORTED');\n      return false;\n    }\n\n    try {\n      var expiry = '', expiryDate = new Date();\n      if (value === null) {\n        cookie.expiry = -1;\n        value = '';\n      }\n      if (cookie.expiry !== 0) {\n        expiryDate.setTime(expiryDate.getTime() + (cookie.expiry*24*60*60*1000));\n        expiry = \"; expires=\"+expiryDate.toGMTString();\n      }\n      if (!!key) {\n        document.cookie = prefix + key + \"=\" + encodeURIComponent(value) + expiry + \"; path=\"+cookie.path;\n      }\n    } catch (e) {\n      $rootScope.$broadcast('LocalStorageModule.notification.error',e.message);\n      return false;\n    }\n    return true;\n  };\n\n  // Directly get a value from a cookie\n  // Example use: localStorageService.cookie.get('library'); // returns 'angular'\n  var getFromCookies = function (key) {\n    if (!browserSupportsCookies()) {\n      $rootScope.$broadcast('LocalStorageModule.notification.error','COOKIES_NOT_SUPPORTED');\n      return false;\n    }\n\n    var cookies = document.cookie.split(';');\n    for(var i=0;i < cookies.length;i++) {\n      var thisCookie = cookies[i];\n      while (thisCookie.charAt(0)==' ') {\n        thisCookie = thisCookie.substring(1,thisCookie.length);\n      }\n      if (thisCookie.indexOf(prefix+key+'=') === 0) {\n        return decodeURIComponent(thisCookie.substring(prefix.length+key.length+1,thisCookie.length));\n      }\n    }\n    return null;\n  };\n\n  var removeFromCookies = function (key) {\n    addToCookies(key,null);\n  };\n\n  var clearAllFromCookies = function () {\n    var thisCookie = null, thisKey = null;\n    var prefixLength = prefix.length;\n    var cookies = document.cookie.split(';');\n    for(var i=0;i < cookies.length;i++) {\n      thisCookie = cookies[i];\n      while (thisCookie.charAt(0)==' ') {\n        thisCookie = thisCookie.substring(1,thisCookie.length);\n      }\n      key = thisCookie.substring(prefixLength,thisCookie.indexOf('='));\n      removeFromCookies(key);\n    }\n  };\n\n  return {\n    isSupported: browserSupportsLocalStorage,\n    set: addToLocalStorage, \n    add: addToLocalStorage, //DEPRECATED\n    get: getFromLocalStorage,\n    keys: getKeysForLocalStorage,\n    remove: removeFromLocalStorage,\n    clearAll: clearAllFromLocalStorage,\n    cookie: {\n      set: addToCookies,\n      add: addToCookies, //DEPRECATED\n      get: getFromCookies,\n      remove: removeFromCookies,\n      clearAll: clearAllFromCookies\n    }\n  };\n\n}]);","angular.module('ev-fdm')\n  .directive('disableValidation', function() {\n    return {\n      require: '^form',\n      restrict: 'A',\n      link: function(scope, element, attrs, form) {\n        var control;\n\n        scope.$watch(attrs.disableValidation, function(value) {\n          if (!control) {\n            control = form[element.attr(\"name\")];\n          }\n          if (value === false) {\n            form.$addControl(control);\n            angular.forEach(control.$error, function(validity, validationToken) {\n              form.$setValidity(validationToken, !validity, control);\n            });\n          } else {\n            form.$removeControl(control);\n          }\n        });\n      }\n    };\n  });\n","angular.module('ev-fdm')\n.directive('strictMin', function() {\n    return {\n        require: 'ngModel',\n        link: function(scope, elm, attrs, ctrl) {\n\n            function validator(viewValue) {\n                var testedValue = parseFloat(viewValue),\n                    min = parseFloat(attrs.strictMin);\n\n                if(testedValue > min ) {\n                    ctrl.$setValidity('strictMin', true);\n                    return viewValue;\n                }\n                else {\n                    ctrl.$setValidity('strictMin', false);\n                    return undefined;\n                }\n\n            };\n\n            ctrl.$parsers.unshift(validator);\n            ctrl.$formatters.push(validator);\n        }\n    }\n});","var module = angular.module('ev-fdm');\n\nmodule.factory('PanelManagerFactory', function() {\n    function shouldBeOverriden(name) {\n        return function() {\n            throw new Error('Method ' + name + ' should be overriden');\n        };\n    }\n    var PanelManager = function() {\n        this.panels = _([]);\n    };\n    PanelManager.prototype.open = shouldBeOverriden('open');\n    PanelManager.prototype.close = shouldBeOverriden('close');\n    PanelManager.prototype.push = function(instance) {\n        this.panels.push(instance);\n    };\n    PanelManager.prototype.remove = function(instance) {\n        var i = this.panels.indexOf(instance);\n        if (i > -1) {\n            this.panels.splice(i, 1);\n        }\n        return i;\n    };\n    PanelManager.prototype.at = function(index) {\n        return this.panels._wrapped[index];\n    };\n    PanelManager.prototype.each = function() {\n        return this.panels.each.apply(this.panels, arguments);\n    };\n    PanelManager.prototype.dismissAll = function(reason) {\n        // dismiss all panels except the first one\n        var i = 0;\n        this.each(function(instance) {\n            if(i !== 0) {\n                instance.dismiss(reason);\n            }\n            i++;\n        });\n    };\n\n    PanelManager.prototype.dismissChildrenId = function(rank) {\n        console.log(rank);\n        var children = this.panels.slice(rank);\n        console.log(children);\n        var reason = '';\n        for (var i = children.length - 1; i >= 0; i--) {\n            var child = children[i];\n            var result = child.dismiss(reason);\n            if (!result) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    PanelManager.prototype.dismissChildren = function(instance, reason) {\n        var children = this.getChildren(instance);\n        for (var i = children.length - 1; i >= 0; i--) {\n            var child = children[i];\n            var result = child.dismiss(reason);\n            if (!result) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n    PanelManager.prototype.last = function() {\n        return this.panels.last();\n    };\n    PanelManager.prototype.getNext = function(instance) {\n        var i = this.panels.indexOf(instance);\n        if (i < this.panels.size() - 1) {\n            return this.at(i + 1);\n        } else {\n            return null;\n        }\n    };\n    PanelManager.prototype.getChildren = function(instance) {\n        var i = this.panels.indexOf(instance);\n        if (i > -1) {\n            return this.panels.slice(i + 1);\n        } else {\n            return [];\n        }\n    };\n    PanelManager.prototype.size = function() {\n        return this.panels.size();\n    };\n    PanelManager.prototype.isEmpty = function() {\n        return this.panels.size() === 0;\n    };\n\n    return {\n        create: function(methods) {\n            var ChildClass = function() {\n                return PanelManager.call(this);\n            };\n            ChildClass.prototype = _({}).extend(PanelManager.prototype, methods);\n            return new ChildClass();\n        }\n    };\n});\n\nmodule.service('panelManager', [ '$rootScope', '$compile', '$animate', '$timeout', 'PanelManagerFactory', function($rootScope, $compile, $animate, $timeout, PanelManagerFactory) {\n\n    var STACKED_WIDTH = 35;\n    var elements = {};\n\n    var stylesCache = window.stylesCache = {};\n    var container = angular.element('.panels-container');\n    var panelZero = container.find('.panel-zero');\n\n    var panelManager = PanelManagerFactory.create({\n        updateLayout: function() {\n            updateLayout();\n        },\n        open: function(instance, options) {\n            instance.$$stacked = false;\n            instance.$$depth = options.depth;\n            var isMain = options.depth === 0;\n            if(isMain) {\n                instance.isMain = true;\n            }\n\n            var el = createPlaceholder(instance.$$depth);\n            var inner = createPanelView(instance, options);\n            el.html(inner);\n            elements[instance.$$id] = el;\n            $animate.enter(el, container, panelZero, function() {\n                panelManager.updateLayout();\n            });\n            var timerResize = null;\n            el.on('resize', function(event, ui) {\n                if(timerResize !== null) {\n                    $timeout.cancel(timerResize);\n                }\n                timerResize = $timeout(function() {\n                    stylesCache[options.panelName] = ui.size.width;\n                    panelManager.updateLayout();\n                }, 100);\n            });\n            return instance;\n        },\n        replace: function(fromInstance, toInstance, options) {\n            if (typeof(elements[fromInstance.$$id]) != 'undefined') {\n                var el = elements[fromInstance.$$id];\n                toInstance.$$depth = options.depth - 1;\n                var inner = createPanelView(toInstance, options);\n                el.html(inner);\n                elements[toInstance.$$id] = el;\n                delete elements[fromInstance.$$id];\n                return toInstance;\n            } else {\n                return panelManager.open(toInstance, options);\n            }\n        },\n        close: function(instance) {\n            if (typeof(elements[instance.$$id]) != 'undefined') {\n                var el = elements[instance.$$id];\n                $animate.leave(el, function() {\n                    delete elements[instance.$$id];\n                    panelManager.updateLayout();\n                });\n            }\n        }\n    });\n\n    function getElement(instance) {\n        if (elements[instance.$$id]) {\n            return elements[instance.$$id];\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Return the panels sizes (if the user resized them)\n     */\n    function getStylesFromCache(instance, options) {\n        var savedWidth = stylesCache[options.panelName];\n        if (savedWidth) {\n            return 'width: ' + savedWidth + 'px;';\n        }\n\n        return '';\n    }\n\n    /**\n     * Create a panel container in the DOM\n     */\n    function createPlaceholder(depth) {\n        var isMain = depth === 0;\n        return angular.element('<div ' +\n            'class=\"panel-placeholder ' + (isMain ? 'panel-main' : '') + '\" ' +\n            'style=\"z-index:' + (2000 + depth) + ';\"></div>');\n    }\n\n    /**\n     * Create a panel view section\n     */\n    function createPanelView(instance, options) {\n        var inner = angular.element('<div ev-panel-breakpoints style=\"' + getStylesFromCache(instance, options) + '\"></div>');\n        inner.html(options.content);\n        options.scope.panelClass = options.panelClass;\n        return $compile(inner)(options.scope);\n    }\n\n    /**\n     * STACKING AND PANELS SIZE MANAGEMENT\n     */\n\n    /**\n     * Our main function for the stacking and panels management\n     */\n    function checkStacking() {\n\n        var windowWidth = $(window).innerWidth();\n\n        var dataPanels = getDataFromPanels(panelManager.panels);\n        var newDataPanels = calculateStackingFromData(dataPanels, windowWidth);\n        resizeAndStackPanels(panelManager.panels, newDataPanels);\n    }\n\n    /**\n     * Extract all useful panels informations\n     * The (min-/max-/stacked-)width and the stacked state\n     * @param  {Array} panels the panels\n     * @return {Array}        Array containing the extracted values\n     */\n    function getDataFromPanels(panels) {\n        var data = [];\n        for (var i = 0; i < panels.size(); i++) {\n            var panel = panelManager.at(i);\n            var panelElement = getElement(panel);\n            data.push({\n                minWidth: parseInt(panelElement.children().first().css('min-width')) || STACKED_WIDTH,\n                maxWidth: parseInt(panelElement.children().first().css('max-width')) || 0,\n                stacked:  panel.$$stacked,\n                width:    panelElement.width(),\n                stackedWidth: STACKED_WIDTH\n            });\n        }\n\n        return data;\n    }\n\n    /**\n     * Calculate datas from the dataPanels received accordingly to a max width\n     * @param  {Array}  datas Panels data\n     * @param  {Int}    limit limit width]\n     * @return {Array}  datas computed\n     */\n    function calculateStackingFromData(datas, limit) {\n        _(datas).each(function(element) {\n            element.stacked = false;\n        });\n\n        /**\n         * For each panels, test if he needs to be stacked\n         */\n        function stackedDatas() {\n\n            for (var i = 0; i < datas.length; i++) {\n\n                var totalMinWidth = _(datas).reduce(function(memo, data) {\n\n                        if (data.stacked) {\n                            return memo + data.stackedWidth;\n                        }\n                        var _width = data.minWidth;\n                        if(_width < data.stackedWidth) {\n                            _width = data.stackedWidth;\n                        }\n\n                        return memo + _width;\n                }, 0);\n                if (totalMinWidth > limit) {\n                    datas[i].stacked = true;\n                }\n            }\n        }\n\n        /**\n         * Update the size of each panels\n         */\n        function updateSize() {\n            var data = null;\n            var i = 0;\n            for (; i < datas.length; i++) {\n                data = datas[i];\n                if (data.width < data.minWidth) {\n                    data.width = data.minWidth;\n                }\n            }\n\n            var totalWidth = _(datas).reduce(function(memo, data) {\n                if (data.stacked) {\n                    return memo + data.stackedWidth;\n                }\n\n                return memo + data.width;\n            }, 0);\n\n            var delta = limit - totalWidth;\n\n            for (i = 0; i < datas.length; i++) {\n                data = datas[i];\n\n                if(data.stacked) {\n                    data.width = data.stackedWidth;\n                    continue;\n                }\n\n                // try to take all delta\n                var oldWidth = data.width;\n                var newWidth = data.width + delta;\n\n                // Check limit\n                if (data.minWidth > newWidth) {\n                    data.width = data.minWidth;\n                }\n\n                // Check limit\n                else if (data.maxWidth !== 0 && data.maxWidth < newWidth) {\n                    data.width = data.maxWidth;\n                } else {\n                    data.width = data.width + delta;\n                }\n\n                delta = delta - (data.width - oldWidth);\n\n                if(delta === 0) {\n                    break;\n                }\n            }\n\n            if (delta !== 0) {\n                console.log('impossible to reach the size');\n            }\n        }\n\n        stackedDatas(datas);\n        updateSize(datas);\n\n        return datas;\n    }\n\n    /**\n     * Apply our results to the panels\n     * @param  {Array} panels      the panels\n     * @param  {Array} dataPanels  the datas we want to apply\n     */\n    function resizeAndStackPanels(panels, dataPanels) {\n        for (var i = 0; i < panels.size(); i++) {\n            var panel = panelManager.at(i);\n            var dataPanel = dataPanels[i];\n\n            var element = getElement(panel);\n\n            if(!element) {\n                console.log('no element for this panel)');\n                continue;\n            }\n\n            if (panel.$$stacked && !dataPanel.stacked) {\n                $animate.removeClass(element, 'stacked');\n            } else if (!panel.$$stacked && dataPanel.stacked) {\n                $animate.addClass(element, 'stacked');\n            }\n\n            panel.$$stacked = dataPanel.stacked;\n\n            element.children().first().width(dataPanel.width);\n\n        }\n    }\n\n    /**\n     * Whenever a layout is changed\n     */\n    function updateLayout() {\n        checkStacking();\n        $rootScope.$broadcast('module-layout-changed');\n    }\n\n    var timerWindowResize = null;\n    $(window).on('resize', function() {\n        if(timerWindowResize !== null) {\n            $timeout.cancel(timerWindowResize);\n        }\n        timerWindowResize = $timeout(function() {\n            panelManager.updateLayout();\n        }, 100);\n    });\n\n    return panelManager;\n}]);"],"sourceRoot":"/source/"}