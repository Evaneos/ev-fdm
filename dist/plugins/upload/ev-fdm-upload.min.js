!function(){"use strict";angular.module("ev-upload",["ev-fdm"])}(),function(){"use strict";angular.module("ev-upload").directive("evPictureButtonUpload",["NotificationsService","$http",function(e,t){return{restrict:"AE",scope:{pictures:"=",buttonText:"@",tooltipText:"@",iconName:"@",url:"@",language:"=",maxFiles:"@",addPicture:"&",onPictureAdded:"&"},template:'<ev-upload settings="settings" file-success="addPicture({picture: file})"upload="newUpload(promise)"><div ng-hide="uploading"><button type="button" tabIndex="-1" class="btn btn-tertiary btn-env ev-upload-clickable"tooltip="{{tooltipText}}"tooltip-placement="top"><span class="icon {{iconName}}"></span> {{buttonText}}</button></div><div class="ev-picture-uploading" ng-show="uploading"><div class="ev-picture-upload-label"> {{"Transfert en cours"| i18n}} </div><p> {{upload.done}} / {{upload.total}} </p></div><div ng-show="uploading" ev-promise-progress="uploadPromise"></div></ev-upload>',link:function(t,n,l){t.uploading=!1,t.settings={acceptedFiles:"image/*",url:t.url,maxFiles:t.maxFiles||100},t.pictures=t.pictures||[],t.$watch("url",function(e){t.settings.url=e}),t.newUpload=function(n){t.upload={done:0,total:"?"},t.uploading=!0,t.uploadPromise=n,n.then(function(){e.addSuccess({text:"Les images ont été transférées avec succès"})},function(){e.add({type:e.type.WARNING,text:"Certaines images n'ont pas pu être transférées."})},function(e){t.upload=e})["finally"](function(){t.uploading=!1})},l.addPicture||(t.addPicture=function(e){e=e.picture;var n=e.data[0];t.language&&(Array.isArray(n.legend)&&(n.legend={}),n.legend[t.language]||(n.legend[t.language]={name:""})),t.pictures.unshift(n),t.onPictureAdded()})}}}])}(),function(){"use strict";angular.module("ev-upload").directive("evPictureUpload",["NotificationsService","$http",function(e,t){return{restrict:"AE",scope:{addPicture:"=",url:"@",language:"="},template:'<ev-upload settings="settings" file-success="pictureUploaded(file)"class="ev-picture-upload" upload="newUpload(promise)"><div ng-hide="uploading"><div class="ev-picture-upload-label">{{ "Faites glisser vos images ici" | i18n }}</div><table style="width:100%"><tr><td style="width:114px"><button type="button" tabIndex="-1" class="btn ev-upload-clickable">{{ "Importer..." | i18n}}</button></td><td style="width:30px´; line-height: 36px;">{{ "ou" | i18n }}</td><td><ng-form novalidate name="flickr" ng-class="{\'has-error\': flickr.$dirty && flickr.$invalid}"><input name="fUrl" placeholder="{{\'Lien Flickr\' | i18n}}" ng-model="$parent.flickrUrl" ng-pattern="flickrUrlPattern" class="form-control" ng-change="uploadFlickrUrl(flickr)"/><div ng-show="flickr.fUrl.$dirty && flickr.fUrl.$invalid"><p class="control-label" for="fUrl" data-ng-show="flickr.fUrl.$error.pattern">{{ "L\'url doit être une photo flickr" | i18n}}</p></div></ng-form></td></tr></table></div><div class="ev-picture-uploading" ng-show="uploading"><div class="ev-picture-upload-label"> {{"Upload en cours"| i18n}} </div><div class="spinner"></div><p> {{upload.done}} / {{upload.total}} {{ "photo(s) uploadée(s)" | i18n }} </p></div><div ng-show="uploading" ev-promise-progress="uploadPromise"></div></ev-upload>',link:function(e){e.flickrUrlPattern=/^(https\:\/\/)?www\.flickr\.com\/photos\/.*\/\d+.*$/,e.settings={acceptedFiles:"image/*",url:e.url}},controller:function(n){n.uploading=!1,n.$watch("url",function(e){n.settings.url=e}),n.uploadFlickrUrl=function(e){if(e.$valid&&n.flickrUrl){var l=/(https\:\/\/)?www\.flickr\.com\/photos\/.*\/\d+/.exec(n.flickrUrl)[0],o=t.post(n.url,{"flickr-url":l});o.success(function(e){var t=e.data[0];n.addPicture(t)}).success(function(){e.$setPristine(),n.flickrUrl=""}),n.newUpload(o),n.upload={done:0,total:1,progress:0}}},n.newUpload=function(t){n.upload=null,n.uploading=!0,n.uploadPromise=t,t.then(function(){e.addSuccess({text:"Les images ont été uploadées avec succès"})},function(t){var n="object"==typeof t.data?t.data:JSON.parse(t.response);e.add({type:e.type.ERROR,text:400===t.status&&null!==n?n.error.message:"Certaines images n'ont pas pu être uploadées.",delay:10})},function(e){n.upload=e})["finally"](function(){n.uploading=!1})},n.pictureUploaded=function(e){var t=e.data[0];n.addPicture(t)}}}}])}(),function(e){"use strict";angular.module("ev-upload").directive("evUpload",["$log","$q","$timeout",function(t,n,l){var o={previewTemplate:!1,previewsContainer:!1,autoQueue:!0,maxFilesize:25,maxFiles:100,uploadMultiple:!1,parallelUploads:3};return{transclude:!0,restrict:"EA",replace:!0,scope:{settings:"=",uploadStart:"&upload",fileSuccess:"&",fileAdded:"&"},template:'<div class="ev-upload"><div ng-transclude> </div></div>',link:function(i,r,a){function d(e){return p.getAcceptedFiles().reduce(function(t,n){return t+n.upload[e]},0)}function u(){var e=r.find(".ev-upload-dropzone");return 0===e.length&&(e=r),e.addClass("dz-default"),e.addClass("dz-message"),e[0]}function s(){return r.find(".ev-upload-clickable")[0]}function c(t){f={done:0,progress:0};var o={deferred:n.defer(),hasFileErrored:!1,hasFileErroredResponse:null},i=function(){f.progress=100*d("bytesSent")/d("total"),f.total=p.getAcceptedFiles().length,o.deferred.notify(f)};p.off("uploadprogress",i).off("maxfilesexceeded"),i(),p.once("error",function(e){o.hasFileErroredResponse=e.xhr,o.hasFileErrored=!0}),p.on("uploadprogress",i);var r=function(){return!p.files.filter(function(t){return t.status===e.QUEUED||t.status===e.ADDED||t.status===e.UPLOADING}).length},a=function(){t.$apply(function(e){l(function(){r()&&(p.off("complete",a),l(function(){o.hasFileErrored?o.deferred.reject(o.hasFileErroredResponse):o.deferred.resolve()}))})})};p.on("maxfilesexceeded",function(){o.deferred.reject("maxfilesexceeded")}),p.on("complete",a),t.currentUpload=o.deferred.promise,t.uploadStart({promise:o.deferred.promise}),t.currentUpload["finally"](function(){p.removeAllFiles(!0),t.currentUpload=null})}i.fileSuccess=i.fileSuccess||function(){},i.fileAdded=i.fileAdded||function(){};var p=null,f=null,g={};i.$watch("settings",function(l){return l.url?(null!==p&&p.destroy(),l=angular.extend(o,l),p=new e(u(),angular.extend({clickable:s()},l)),i.currentUpload=null,p.on("addedfile",function(e){null===i.currentUpload&&i.$apply(c);var t=n.defer();g[e.name]=t;var l=function(){p.removeFile(e)};i.$apply(function(n){n.fileAdded({dropzoneFile:e,promise:t.promise,cancel:l})})}),p.on("uploadprogress",function(e,t){i.$apply(function(n){g[e.name].notify(t)})}),p.on("success",function(e,t){i.$apply(function(n){g[e.name].resolve({file:t}),n.fileSuccess({file:t})})}),p.on("error",function(e,t,n){t||500!==n.status||(t=l.dictResponseError||"Unexpected error during the upload"),"Upload canceled."===t&&(t=l.dictCanceledUpload||"The upload has been canceled"),i.$apply(function(n){g[e.name].reject(t)})}),p.on("canceled",function(e){var t=g[e.name];i.$apply(function(e){t.reject(l.dictCanceledUpload||"The upload has been canceled")})}),void p.on("complete",function(e){angular.isDefined(f)&&(f.done+=1)})):void t.warn("No url provided to the upload zone")},!0),i.$on("$destroy",function(){p.destroy()})}}}])}(Dropzone);
//# sourceMappingURL=ev-fdm-upload.min.js.map
