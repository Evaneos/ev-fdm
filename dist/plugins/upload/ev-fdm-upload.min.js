!function(){"use strict";angular.module("ev-upload",["ev-fdm"])}(),function(){"use strict";angular.module("ev-upload").directive("evPictureUpload",["NotificationsService","$http",function(e,l){return{restrict:"AE",scope:{pictureSuccess:"&newPicture",url:"@"},template:'<ev-upload settings="settings" file-success="pictureSuccess({picture: file})"class="ev-picture-upload" upload="newUpload(promise)"><div ng-hide="uploading"><div class="ev-picture-upload-label">{{ "Faites glisser vos images ici" | i18n }}</div><table style="width:100%"><tr><td style="width:114px"><button type="button" class="btn btn-default ev-upload-clickable">{{ "Importer..." | i18n}}</button></td><td style="width:30px´; line-height: 36px;">{{ "ou" | i18n }}</td><td><form novalidate name="flickr" ng-class="{\'has-error\': flickr.$dirty && flickr.$invalid}"><input name="fUrl" placeholder="{{\'Lien Flickr\' | i18n}}" ng-model="$parent.flickrUrl" ng-pattern="flickrUrlPattern" required="" class="form-control" ng-change="uploadFlickrUrl(flickr)"/><div ng-show="flickr.fUrl.$dirty && flickr.fUrl.$invalid"><p class="control-label" for="fUrl" data-ng-show="flickr.fUrl.$error.pattern">{{ "L\'url doit être une photo flickr" | i18n}}</p></div></form></td></tr></table></div><div class="ev-picture-uploading" ng-show="uploading"><div class="ev-picture-upload-label"> {{"Upload en cours"| i18n}} </div><div class="spinner"></div><p> {{upload.done}} / {{upload.total}} {{ "photo(s) uploadée(s)" | i18n }} </p></div><div ng-show="uploading" ev-promise-progress="uploadPromise"></div></ev-upload>',link:function(e){e.flickrUrlPattern=/^(https\:\/\/)?www\.flickr\.com\/photos\/.*\/\d+.*$/,e.settings={acceptedFiles:"image/*",url:e.url}},controller:function(n){n.$watch("url",function(e){n.settings.url=e}),n.uploading=!1,n.uploadFlickrUrl=function(e){if(e.$valid){var r=/(https\:\/\/)?www\.flickr\.com\/photos\/.*\/\d+/.exec(n.flickrUrl)[0],o=l.post(n.url,{"flickr-url":r});o.success(function(e){n.pictureSuccess({picture:e})}).success(function(){e.$setPristine(),n.flickrUrl=""}),n.newUpload(o),n.upload={done:0,total:1,progress:0}}},n.newUpload=function(l){n.upload=null,n.uploading=!0,n.uploadPromise=l,l.then(function(){e.addSuccess({text:"Les images ont été uploadées avec succès"})},function(){e.add({type:e.type.WARNING,text:"Certaines images n'ont pas pu être uploadées."})},function(e){n.upload=e}).finally(function(){n.uploading=!1})}}}}])}(),function(e){"use strict";angular.module("ev-upload").directive("evUpload",["$log","$q",function(l,n){var r={previewTemplate:!1,previewsContainer:!1,autoQueue:!0,maxFilesize:12,maxFiles:40,uploadMultiple:!1,parallelUploads:3};return{transclude:!0,restrict:"EA",replace:!0,scope:{settings:"=",uploadStart:"&upload",fileSuccess:"&",fileAdded:"&"},template:'<div class="ev-upload"><div ng-transclude> </div></div>',link:function(o,t){function i(e){return u.getAcceptedFiles().reduce(function(l,n){return l+n.upload[e]},0)}function d(){var e=t.find(".ev-upload-dropzone");return 0===e.length&&(e=t),e.addClass("dz-default"),e.addClass("dz-message"),e[0]}function a(){return t.find(".ev-upload-clickable")[0]}function c(e){s={done:0};var l=function(){s.progress=100*i("bytesSent")/i("total"),s.total=u.getAcceptedFiles().length,r.deferred.notify(s)};u.off("uploadprogress",l).off("maxfilesexceeded");var r={deferred:n.defer(),hasFileErrored:!1};l(),u.once("error",function(){r.hasFileErrored=!0}),u.on("uploadprogress",l);var o=function(){e.$apply(function(){100===s.progress&&(u.off("complete",o),r.hasFileErrored?r.deferred.reject("filehaserrored"):r.deferred.resolve())})};u.on("complete",o),u.on("maxfilesexceeded",function(){r.deferred.reject("maxfilesexceeded")}),e.currentUpload=r.deferred.promise,e.uploadStart({promise:r.deferred.promise}),e.currentUpload.finally(function(){u.removeAllFiles(!0),e.currentUpload=null})}o.fileSuccess=o.fileSuccess||function(){},o.fileAdded=o.fileAdded||function(){};var u=null,s=null,p={};o.$watch("settings",function(t){return t.url?(null!==u&&u.destroy(),t=angular.extend(r,t),u=new e(d(),angular.extend({clickable:a()},t)),o.currentUpload=null,u.on("addedfile",function(e){null===o.currentUpload&&o.$apply(c);var l=n.defer();p[e.name]=l;var r=function(){u.removeFile(e)};o.$apply(function(n){n.fileAdded({dropzoneFile:e,promise:l.promise,cancel:r})})}),u.on("uploadprogress",function(e,l){o.$apply(function(){p[e.name].notify(l)})}),u.on("success",function(e,l){o.$apply(function(n){p[e.name].resolve({file:l}),n.fileSuccess({file:l})})}),u.on("error",function(e,l){o.$apply(function(){p[e.name].reject(l)})}),u.on("canceled",function(e){var l=p[e.name];o.$apply(function(){l.reject(t.dictCanceledUpload||"The upload has been canceled")})}),u.on("complete",function(){angular.isDefined(s)&&(s.done+=1)}),void 0):(l.warn("No url provided to the upload zone"),void 0)},!0),o.$on("$destroy",function(){u.destroy()})}}}])}(Dropzone);
//# sourceMappingURL=ev-fdm-upload.min.js.map