{"version":3,"file":"ev-fdm-upload.min.js","sources":["app.js","directives/pictureUploadDirective.js","directives/uploadDirective.js"],"names":[],"mappings":"CAAA,WACA,YACA,SAAA,OAAA,aAAA,cCFA,WACA,YACA,SAAA,OAAA,aACA,UAAA,mBAAA,uBAAA,QAAA,SAAA,EAAA,GAaA,OACA,SAAA,KACA,OACA,eAAA,cACA,IAAA,KAEA,SACA,ixCAiCA,KAAA,SAAA,GACA,EAAA,iBAAA,sDACA,EAAA,UACA,cAAA,UACA,IAAA,EAAA,MAGA,WAAA,SAAA,GACA,EAAA,OAAA,MAAA,SAAA,GACA,EAAA,SAAA,IAAA,IAEA,EAAA,WAAA,EACA,EAAA,gBAAA,SAAA,GAMA,GAAA,EAAA,OAAA,CACA,GAAA,GAAA,kDAAA,KAAA,EAAA,WAAA,GACA,EAAA,EAAA,KAAA,EAAA,KAAA,aAAA,GACA,GACA,QAAA,SAAA,GACA,EAAA,gBAAA,QAAA,MAEA,QAAA,WACA,EAAA,eACA,EAAA,UAAA,KAGA,EAAA,UAAA,GACA,EAAA,QACA,KAAA,EACA,MAAA,EACA,SAAA,KAIA,EAAA,UAAA,SAAA,GACA,EAAA,OAAA,KACA,EAAA,WAAA,EACA,EAAA,cAAA,EACA,EACA,KACA,WACA,EAAA,YACA,KAAA,8CAGA,WACA,EAAA,KACA,KAAA,EAAA,KAAA,QACA,KAAA,qCAGA,SAAA,GACA,EAAA,OAAA,IAGA,QAAA,WACA,EAAA,WAAA,aCnHA,SAAA,GACA,YACA,SAAA,OAAA,aACA,UAAA,YAAA,OAAA,KAAA,SAAA,EAAA,GAmBA,GAAA,IACA,UAAA,uBACA,iBAAA,EACA,mBAAA,EACA,WAAA,EACA,YAAA,GACA,SAAA,GAEA,gBAAA,EACA,gBAAA,EAGA,QACA,YAAA,EACA,SAAA,KACA,SAAA,EACA,OACA,SAAA,IACA,YAAA,UACA,YAAA,KAEA,SAAA,wFACA,KAAA,SAAA,EAAA,GAMA,QAAA,GAAA,GACA,MAAA,GAAA,mBAAA,OAAA,SAAA,EAAA,GACA,MAAA,GAAA,EAAA,OAAA,IACA,GAkCA,QAAA,GAAA,GACA,GACA,KAAA,GAGA,EACA,IAAA,uBACA,IAAA,iBACA,IAAA,mBAGA,IAAA,IACA,SAAA,EAAA,QACA,gBAAA,EAEA,GAAA,GAAA,QAAA,WACA,EAAA,gBAAA,IAGA,EAAA,GAAA,iBAAA,WACA,EAAA,SAAA,IAAA,EAAA,aAAA,EAAA,SACA,EAAA,MAAA,EAAA,mBAAA,OACA,EAAA,SAAA,OAAA,KAEA,EAAA,GAAA,gBAAA,WACA,EAAA,OAAA,WACA,EAAA,eACA,EAAA,SAAA,OAAA,kBAEA,EAAA,SAAA,cAIA,EAAA,GAAA,mBAAA,WACA,EAAA,SAAA,OAAA,sBAGA,EAAA,cAAA,EAAA,SAAA,QACA,EAAA,aAAA,QAAA,EAAA,SAAA,UACA,EAAA,cAAA,QAAA,WACA,EAAA,gBAAA,GACA,EAAA,cAAA,OAlFA,GAAA,GAAA,KACA,EAAA,IAUA,GAAA,OAAA,WAAA,SAAA,GACA,MAAA,GAAA,KAIA,OAAA,GACA,EAAA,UAEA,EAAA,GAAA,GAAA,EAAA,GAAA,QAAA,OAAA,EAAA,IAGA,EAAA,cAAA,KAGA,EAAA,GAAA,UAAA,WACA,OAAA,EAAA,eACA,EAAA,OAAA,SAIA,GAAA,GAAA,UAAA,SAAA,EAAA,GACA,EAAA,MAAA,EACA,EAAA,OAAA,SAAA,GACA,EAAA,aAAA,KAAA,aArBA,GAAA,KAAA,wCAyBA,GAiDA,EAAA,IAAA,WAAA,WACA,EAAA,kBAKA","sourcesContent":["(function () {\n    'use strict';\n    angular.module('ev-upload', ['ev-fdm']);\n}) ();","; (function () {\n'use strict';\nangular.module('ev-upload')\n    .directive('evPictureUpload', ['NotificationsService', '$http', function (NotificationsService, $http) {\n\n/*  ev-picture-upload\n    =================\n    Hi! I'm a directive used for uploading pictures. I'm based on the `ev-upload` directive. But I can also\n    manage flickr uploads !\n\n    You can parameter me with:\n    - `url`:  which is the place where I'll upload the pictures\n    - `pictureSuccess`:  a function called each time a picture has successfully been uploaded (by flickr\n        or manually). The picture is passed as argument.\n\n*/\n        return {\n            restrict: 'AE',\n            scope: {\n                pictureSuccess: '&newPicture',\n                url: '@'\n            },\n            template:\n            '<ev-upload settings=\"settings\" file-success=\"pictureSuccess({picture: file})\"' +\n                'class=\"ev-picture-upload\" upload=\"newUpload(promise)\">' +\n                '<div ng-hide=\"uploading\">' +\n                    '<div class=\"ev-picture-upload-label\">{{ \"Faites glisser vos images ici\" | i18n }}</div>' +\n                    '<table style=\"width:100%\"><tr><td style=\"width:114px\">'+\n                            '<button type=\"button\" class=\"btn btn-default ev-upload-clickable\">' +\n                                '{{ \"Importer...\" | i18n}}' +\n                            '</button>' +\n                        '</td>'+\n                        '<td style=\"width:30px´; line-height: 36px;\">'+\n                            '{{ \"ou\" | i18n }}' +\n                        '</td>'+\n                        '<td>'+\n                            '<form novalidate name=\"flickr\" ' +\n                                'ng-class=\"{\\'has-error\\': flickr.$dirty && flickr.$invalid}\">' +\n                                '<input name=\"fUrl\" placeholder=\"{{\\'Lien Flickr\\' | i18n}}\" ' +\n                                    'ng-model=\"$parent.flickrUrl\" ng-pattern=\"flickrUrlPattern\" required=\"\" ' +\n                                    'class=\"form-control\" ng-change=\"uploadFlickrUrl(flickr)\"/>' +\n                                '<div ng-show=\"flickr.fUrl.$dirty && flickr.fUrl.$invalid\">' +\n                                    '<p class=\"control-label\" for=\"fUrl\" data-ng-show=\"flickr.fUrl.$error.pattern\">'+\n                                        '{{ \"L\\'url doit être une photo flickr\" | i18n}}</p>' +\n                                '</div>' +\n                            '</form>' +\n                        '</td></tr></table>'+\n                '</div>' +\n                '<div class=\"ev-picture-uploading\" ng-show=\"uploading\">' +\n                    '<div class=\"ev-picture-upload-label\"> {{\"Upload en cours\"| i18n}} </div>' +\n                    '<div class=\"spinner\"></div>' +\n                    '<p> {{upload.done}} / {{upload.total}} {{ \"photo(s) uploadée(s)\" | i18n }} </p>' +\n                '</div>' +\n                '<div ng-show=\"uploading\" ev-promise-progress=\"uploadPromise\"></div>' +\n            '</ev-upload>',\n\n            link: function ($scope) {\n                $scope.flickrUrlPattern = /^(https\\:\\/\\/)?www\\.flickr\\.com\\/photos\\/.*\\/\\d+.*$/;\n                $scope.settings = {\n                    acceptedFiles: 'image/*',\n                    url: $scope.url\n                };\n            },\n            controller: function ($scope) {\n                $scope.$watch('url', function (url) {\n                    $scope.settings.url = url;\n                });\n                $scope.uploading = false;\n                $scope.uploadFlickrUrl = function (flickrForm) {\n                    /* Trailing the ends in order to have a https://www.flickr.com/photos/{user-id}/{photo-id} url\n                        Warning: `.*` is greedy, so an address like:\n                            https://www.flickr.com/photos/{user-id}/{photo-id}/blabla/1512\n                        will not be parsed nicely\n                     */\n                    if (!flickrForm.$valid) { return; }\n                    var flickrUrl = /(https\\:\\/\\/)?www\\.flickr\\.com\\/photos\\/.*\\/\\d+/ .exec($scope.flickrUrl)[0];\n                    var uploadPromise = $http.post($scope.url, {'flickr-url': flickrUrl});\n                    uploadPromise\n                        .success(function (response) {\n                            $scope.pictureSuccess({picture: response});\n                        })\n                        .success(function () {\n                            flickrForm.$setPristine();\n                            $scope.flickrUrl = \"\";\n                        });\n\n                    $scope.newUpload(uploadPromise);\n                    $scope.upload = {\n                        done: 0,\n                        total: 1,\n                        progress: 0\n                    };\n                };\n\n                $scope.newUpload = function (upload) {\n                    $scope.upload = null;\n                    $scope.uploading = true;\n                    $scope.uploadPromise = upload;\n                    upload\n                        .then(\n                            function success () {\n                                NotificationsService.addSuccess({\n                                    text: 'Les images ont été uploadées avec succès'\n                                });\n                            },\n                            function error () {\n                                NotificationsService.add({\n                                    type: NotificationsService.type.WARNING,\n                                    text: 'Erreur lors de l\\'upload d\\'image'\n                                });\n                            },\n                            function onNotify (progress) {\n                                $scope.upload = progress;\n                            }\n                        )\n                        .finally(function () {\n                            $scope.uploading = false;\n                        });\n                };\n            }\n        };\n}]);\n}) ();\n","/* global Dropzone */\n; (function (Dropzone) {\n    'use strict';\n    angular.module('ev-upload')\n        .directive('evUpload', ['$log', '$q', function ($log, $q) {\n\n    /*  ev-upload\n        =========\n        Hi! I'm a directive used for uploading files.\n\n        You can give me two callback: `uploadStart` and `fileSuccess`\n        - `fileSuccess` will be called each time a file has successfully been uploaded, with the data returned by the\n            server.\n        - `upload` will be called when a new multiple upload start (for instance, when the user dropped some files\n            on the dropzone). It will be call with an argument: the promise for the status of the whole upload.\n\n        My inner heart is powered by Dropzone. You can pass any settings to it through my `settings` parameter.\n        Consequently, you can do whatever you want. Be wise :)\n\n        ** Careful, if you change the settings parameters, all the current upload will be canceled, as a new dropzone\n        object will be created. **\n    */\n\n        var BASE_CONFIG = {\n            clickable: '.ev-upload-clickable',\n            previewTemplate: false,\n            previewsContainer: false,\n            autoQueue: true,\n            maxFilesize: 12,\n            maxFiles: 40,\n\n            uploadMultiple: false,\n            parallelUploads: 3\n        };\n\n            return {\n                transclude: true,\n                restrict: 'EA',\n                replace: true,\n                scope: {\n                    settings: '=',\n                    uploadStart: '&upload',\n                    fileSuccess: '&'\n                },\n                template: '<div class=\"ev-upload\"><div class=\"dz-default dz-message\" ng-transclude> </div></div>',\n                link: function ($scope, elem, attrs) {\n\n                    var dropzone = null;\n                    var progress = null;\n\n\n                    function getBytes (status) {\n                        return dropzone.getAcceptedFiles().reduce(function (bytes, file) {\n                            return bytes + file.upload[status];\n                        }, 0);\n                    }\n\n\n                    $scope.$watch('settings', function (settings) {\n                        if (!settings.url) {\n                            $log.warn('No url provided to the upload zone');\n                            return;\n                        }\n                        if (dropzone !== null) {\n                            dropzone.destroy();\n                        }\n                        dropzone = new Dropzone(elem[0], angular.extend(BASE_CONFIG, settings));\n                        // the promise for the whole upload\n\n                        $scope.currentUpload = null;\n\n                        // At the beginning of a new file upload.\n                        dropzone.on('sending', function (file) {\n                            if ($scope.currentUpload === null) {\n                                $scope.$apply(startNewUpload);\n                            }\n                        });\n\n                        dropzone.on('success', function (file, response) {\n                            progress.done += 1;\n                            $scope.$apply(function ($scope) {\n                                $scope.fileSuccess({file: response});\n                            });\n                        });\n\n                    }, true);\n\n                    // Create a new overall upload object\n                    function startNewUpload($scope) {\n                        progress = {\n                            done: 0,\n                        };\n\n                        dropzone\n                            .off('totaluploadprogress')\n                            .off('queuecomplete')\n                            .off('maxfilesexceeded');\n\n                        // upload object, encapsulate the state of the current (multi file) upload\n                        var upload = {\n                            deferred: $q.defer(),\n                            hasFileErrored: false,\n                        };\n                        dropzone.on('error', function() {\n                            upload.hasFileErrored = true;\n                        });\n\n                        dropzone.on('uploadprogress', function () {\n                            progress.progress = 100 * getBytes('bytesSent') / getBytes('total');\n                            progress.total = dropzone.getAcceptedFiles().length;\n                            upload.deferred.notify(progress);\n                        });\n                        dropzone.on('queuecomplete', function () {\n                            $scope.$apply(function ($scope) {\n                                if (upload.hasFileErrored) {\n                                    upload.deferred.reject('filehaserrored');\n                                } else {\n                                    upload.deferred.resolve();\n                                }\n                            });\n                        });\n                        dropzone.on('maxfilesexceeded', function() {\n                            upload.deferred.reject('maxfilesexceeded');\n                        });\n\n                        $scope.currentUpload = upload.deferred.promise;\n                        $scope.uploadStart({promise: upload.deferred.promise});\n                        $scope.currentUpload.finally(function () {\n                            dropzone.removeAllFiles(true);\n                            $scope.currentUpload = null;\n                        });\n\n                    }\n\n                    $scope.$on('$destroy', function () {\n                        dropzone.destroy();\n                    });\n                }\n            };\n        }]);\n}(Dropzone));"],"sourceRoot":"/source/"}