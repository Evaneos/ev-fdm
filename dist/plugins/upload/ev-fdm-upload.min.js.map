{"version":3,"sources":["app.js","directives/pictureButtonUploadDirective.js","directives/pictureUploadDirective.js","directives/uploadDirective.js"],"names":["angular","module","directive","NotificationsService","$http","restrict","scope","pictures","buttonText","tooltipText","iconName","url","language","maxFiles","addPicture","onPictureAdded","template","link","$scope","elem","attrs","uploading","settings","acceptedFiles","$watch","newUpload","upload","done","total","uploadPromise","then","addSuccess","text","add","type","WARNING","progress","picture","pictureData","data","Array","isArray","legend","name","unshift","flickrUrlPattern","controller","uploadFlickrUrl","flickrForm","$valid","flickrUrl","exec","post","flickr-url","success","pictureUploaded","$setPristine","response","ERROR","status","error","message","delay","Dropzone","$log","$q","$timeout","BASE_CONFIG","previewTemplate","previewsContainer","autoQueue","maxFilesize","uploadMultiple","parallelUploads","transclude","replace","uploadStart","fileSuccess","fileAdded","getBytes","dropzone","getAcceptedFiles","reduce","bytes","file","getDropzoneElement","dz","find","length","addClass","getClickableElement","startNewUpload","deferred","defer","hasFileErrored","computeOverallProgress","notify","off","once","on","isUploadComplete","files","filter","QUEUED","ADDED","UPLOADING","stopIfComplete","$apply","reject","resolve","currentUpload","promise","removeAllFiles","filesPromises","destroy","extend","clickable","cancel","removeFile","dropzoneFile","xhr","dictResponseError","dictCanceledUpload","isDefined","warn","$on"],"mappings":"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","file":"ev-fdm-upload.min.js","sourcesContent":["(function () {\n    'use strict';\n    angular.module('ev-upload', ['ev-fdm']);\n}) ();","; (function () {\n'use strict';\nangular.module('ev-upload')\n    .directive('evPictureButtonUpload', ['NotificationsService', '$http', function (NotificationsService, $http) {\n\n/*  ev-picture-button-upload\n    =================\n    Hi! I'm a directive used for uploading pictures but I'm just a button.\n    If you want a more advanced one, you can use the evPictureUpload\n\n    You can parameter me with:\n    - `url`:  which is the place where I'll upload the pictures\n    - `pictureSuccess`:  a function called each time a picture has successfully been uploaded (by flickr\n        or manually). The picture is passed as argument.\n\n*/\n        return {\n            restrict: 'AE',\n            scope: {\n                pictures: '=',\n                buttonText: '@',\n                tooltipText: '@',\n                iconName: '@',\n                url: '@',\n                language: '=',\n                maxFiles: '@',\n                addPicture: '&',\n                onPictureAdded: '&'\n            },\n            template:\n            '<ev-upload settings=\"settings\" file-success=\"addPicture({picture: file})\"' +\n                'upload=\"newUpload(promise)\">' +\n                '<div ng-hide=\"uploading\">' +\n                    '<button type=\"button\" tabIndex=\"-1\" class=\"btn btn-tertiary btn-env ev-upload-clickable\"' +\n                            'tooltip=\"{{tooltipText}}\"' +\n                            'tooltip-placement=\"top\">' +\n                        '<span class=\"icon {{iconName}}\"></span> ' +\n                       '{{buttonText}}' +\n                    '</button>' +\n                '</div>' +\n                '<div class=\"ev-picture-uploading\" ng-show=\"uploading\">' +\n                    '<div class=\"ev-picture-upload-label\"> {{\"Transfert en cours\"| i18n}} </div>' +\n                    '<p> {{upload.done}} / {{upload.total}} </p>' +\n                '</div>' +\n                '<div ng-show=\"uploading\" ev-promise-progress=\"uploadPromise\"></div>' +\n            '</ev-upload>',\n\n            link: function ($scope, elem, attrs) {\n                $scope.uploading = false;\n\n                $scope.settings = {\n                    acceptedFiles: 'image/*',\n                    url: $scope.url,\n                    maxFiles: $scope.maxFiles || 100\n                };\n\n                $scope.pictures = $scope.pictures || [];\n\n                $scope.$watch('url', function (url) {\n                    $scope.settings.url = url;\n                });\n\n                $scope.newUpload = function (upload) {\n                    $scope.upload = {\n                        done: 0,\n                        total: '?'\n                    };\n                    $scope.uploading = true;\n                    $scope.uploadPromise = upload;\n                    upload\n                        .then(\n                            function success () {\n                                NotificationsService.addSuccess({\n                                    text: 'Les images ont été transférées avec succès'\n                                });\n                            },\n                            function error () {\n                                NotificationsService.add({\n                                    type: NotificationsService.type.WARNING,\n                                    text: 'Certaines images n\\'ont pas pu être transférées.'\n                                });\n                            },\n                            function onNotify (progress) {\n                                $scope.upload = progress;\n                            }\n                        )\n                        .finally(function () {\n                            $scope.uploading = false;\n                        });\n                };\n\n                // This allow us to override the add picture\n                if(!attrs.addPicture) {\n                    $scope.addPicture = function(picture) {\n                        picture = picture.picture;\n                        var pictureData = picture.data[0];\n                        if($scope.language) {\n                            if (Array.isArray(pictureData.legend)) {\n                                pictureData.legend = {};\n                            }\n                            if (!pictureData.legend[$scope.language]) {\n                                pictureData.legend[$scope.language] = { name: '' };\n                            }\n                        }\n\n                        $scope.pictures.unshift(pictureData);\n                        $scope.onPictureAdded();\n                    };\n                }\n            }\n        };\n}]);\n}) ();\n","/* jshint maxlen: 200 */\n; (function () {\n'use strict';\nangular.module('ev-upload')\n    .directive('evPictureUpload', ['NotificationsService', '$http', function (NotificationsService, $http) {\n\n/*  ev-picture-upload\n    =================\n    Hi! I'm a directive used for uploading pictures. I'm based on the `ev-upload` directive. But I can also\n    manage flickr uploads !\n\n    You can parameter me with:\n    - `url`:  which is the place where I'll upload the pictures\n    - `addPicture`:  a function called each time a picture has successfully been uploaded (by flickr\n        or manually). The picture is passed as argument.\n\n*/\n        return {\n            restrict: 'AE',\n            scope: {\n                addPicture: '=',\n                url: '@',\n                language: '='\n            },\n            template:\n            '<ev-upload settings=\"settings\" file-success=\"pictureUploaded(file)\"' +\n                'class=\"ev-picture-upload\" upload=\"newUpload(promise)\">' +\n                '<div ng-hide=\"uploading\">' +\n                    '<div class=\"ev-picture-upload-label\">{{ \"Faites glisser vos images ici\" | i18n }}</div>' +\n                    '<table style=\"width:100%\"><tr><td style=\"width:114px\">'+\n                            '<button type=\"button\" tabIndex=\"-1\" class=\"btn ev-upload-clickable\">' +\n                                '{{ \"Importer...\" | i18n}}' +\n                            '</button>' +\n                        '</td>'+\n                        '<td style=\"width:30px´; line-height: 36px;\">'+\n                            '{{ \"ou\" | i18n }}' +\n                        '</td>'+\n                        '<td>'+\n                            '<ng-form novalidate name=\"flickr\" ' +\n                                'ng-class=\"{\\'has-error\\': flickr.$dirty && flickr.$invalid}\">' +\n                                '<input name=\"fUrl\" placeholder=\"{{\\'Lien Flickr\\' | i18n}}\" ' +\n                                    'ng-model=\"$parent.flickrUrl\" ng-pattern=\"flickrUrlPattern\" ' +\n                                    'class=\"form-control\" ng-change=\"uploadFlickrUrl(flickr)\"/>' +\n                                '<div ng-show=\"flickr.fUrl.$dirty && flickr.fUrl.$invalid\">' +\n                                    '<p class=\"control-label\" for=\"fUrl\" data-ng-show=\"flickr.fUrl.$error.pattern\">'+\n                                        '{{ \"L\\'url doit être une photo flickr\" | i18n}}</p>' +\n                                '</div>' +\n                            '</ng-form>' +\n                        '</td></tr></table>'+\n                '</div>' +\n                '<div class=\"ev-picture-uploading\" ng-show=\"uploading\">' +\n                    '<div class=\"ev-picture-upload-label\"> {{\"Upload en cours\"| i18n}} </div>' +\n                    '<div class=\"spinner\"></div>' +\n                    '<p> {{upload.done}} / {{upload.total}} {{ \"photo(s) uploadée(s)\" | i18n }} </p>' +\n                '</div>' +\n                '<div ng-show=\"uploading\" ev-promise-progress=\"uploadPromise\"></div>' +\n            '</ev-upload>',\n\n            link: function ($scope) {\n                $scope.flickrUrlPattern = /^(https\\:\\/\\/)?www\\.flickr\\.com\\/photos\\/.*\\/\\d+.*$/;\n                $scope.settings = {\n                    acceptedFiles: 'image/*',\n                    url: $scope.url\n                };\n            },\n            controller: function ($scope) {\n                $scope.uploading = false;\n                $scope.$watch('url', function (url) {\n                    $scope.settings.url = url;\n                });\n                $scope.uploadFlickrUrl = function (flickrForm) {\n                    /* Trailing the ends in order to have a https://www.flickr.com/photos/{user-id}/{photo-id} url\n                        Warning: `.*` is greedy, so an address like:\n                            https://www.flickr.com/photos/{user-id}/{photo-id}/blabla/1512\n                        will not be parsed nicely\n                     */\n                    if (!flickrForm.$valid || !$scope.flickrUrl) {\n                        return;\n                    }\n                    var flickrUrl = /(https\\:\\/\\/)?www\\.flickr\\.com\\/photos\\/.*\\/\\d+/ .exec($scope.flickrUrl)[0];\n                    var uploadPromise = $http.post($scope.url, {'flickr-url': flickrUrl});\n                    uploadPromise\n                        .success(function (pictureUploaded) {\n                            var picture = pictureUploaded.data[0];\n                            $scope.addPicture(picture);\n                        })\n                        .success(function () {\n                            flickrForm.$setPristine();\n                            $scope.flickrUrl = \"\";\n                        });\n\n                    $scope.newUpload(uploadPromise);\n                    $scope.upload = {\n                        done: 0,\n                        total: 1,\n                        progress: 0\n                    };\n                };\n\n                $scope.newUpload = function (upload) {\n                    $scope.upload = null;\n                    $scope.uploading = true;\n                    $scope.uploadPromise = upload;\n                    upload\n                        .then(\n                            function success() {\n                                NotificationsService.addSuccess({\n                                    text: 'Les images ont été uploadées avec succès'\n                                });\n                            },\n                            function error(response) {\n                                NotificationsService.add({\n                                    type: NotificationsService.type.ERROR,\n                                    text: response.status === 400 ? response.data.error.message\n                                                    : 'Certaines images n\\'ont pas pu être uploadées.',\n                                    delay: 10,\n                                });\n                            },\n                            function onNotify(progress) {\n                                $scope.upload = progress;\n                            }\n                        )\n                        .finally(function () {\n                            $scope.uploading = false;\n                        });\n                };\n\n                $scope.pictureUploaded = function(pictureUploaded) {\n                    var picture = pictureUploaded.data[0];\n                    $scope.addPicture(picture);\n                };\n            }\n        };\n}]);\n}) ();\n","/* global Dropzone */\n; (function (Dropzone) {\n    'use strict';\n    angular.module('ev-upload')\n        .directive('evUpload', ['$log', '$q', '$timeout', function ($log, $q, $timeout) {\n\n    /*  ev-upload\n        =========\n        Hi! I'm a directive used for uploading files.\n\n        You can give me three callback: `uploadStart`, `fileSuccess` and `fileAdded`\n        - `uploadStart` will be called when a new multiple upload start (for instance, when the user dropped some files\n            on the dropzone). It will be call with an argument: the promise for the status of the whole upload.\n        - `fileSuccess` will be called each time a file has successfully been uploaded, with the data returned by the\n            server.\n        - `fileAdded` will be called each time a file is added to the queue. It will be called with 3 arguments :\n            - dropzoneFile : the Dropzone file being uploaded\n            - promise : the promise associated with the file\n            - cancel : a function that can be called to cancel the upload of the file.\n\n        Clickable Element : you can define a clickable element inside the directive with the\n                            class '.ev-upload-clickable'\n\n        Dropzone Element : you can define a clickable element inside the directive with the class '.ev-upload-dropzone'\n                           If the class is not present, it will use the root element.\n\n        My inner heart is powered by Dropzone. You can pass any settings to it through my `settings` parameter.\n        Consequently, you can do whatever you want. Be wise :)\n\n        ** Careful, if you change the settings parameters, all the current upload will be canceled, as a new dropzone\n        object will be created. **\n    */\n\n        var BASE_CONFIG = {\n            previewTemplate: false,\n            previewsContainer: false,\n            autoQueue: true,\n            maxFilesize: 12,\n            maxFiles: 100,\n\n            uploadMultiple: false,\n            parallelUploads: 3\n        };\n\n            return {\n                transclude: true,\n                restrict: 'EA',\n                replace: true,\n                scope: {\n                    settings: '=',\n                    uploadStart: '&upload',\n                    fileSuccess: '&',\n                    fileAdded: '&'\n                },\n                template: '<div class=\"ev-upload\"><div ng-transclude> </div></div>',\n                link: function ($scope, elem, attrs) {\n\n                    $scope.fileSuccess = $scope.fileSuccess || function() {};\n                    $scope.fileAdded = $scope.fileAdded || function() {};\n\n                    var dropzone = null;\n                    var progress = null;\n\n                    var filesPromises = {};\n                    function getBytes (status) {\n                        return dropzone.getAcceptedFiles().reduce(function (bytes, file) {\n                            return bytes + file.upload[status];\n                        }, 0);\n                    }\n\n                    function getDropzoneElement() {\n                        var dz = elem.find('.ev-upload-dropzone');\n                        if (dz.length === 0) {\n                            dz = elem;\n                        }\n                        dz.addClass(\"dz-default\");\n                        dz.addClass(\"dz-message\");\n                        return dz[0];\n                    }\n\n                    function getClickableElement() {\n                        return elem.find('.ev-upload-clickable')[0];\n                    }\n\n                    $scope.$watch('settings', function (settings) {\n                        if (!settings.url) {\n                            $log.warn('No url provided to the upload zone');\n                            return;\n                        }\n                        if (dropzone !== null) {\n                            dropzone.destroy();\n                        }\n                        settings = angular.extend(BASE_CONFIG, settings);\n                        dropzone = new Dropzone(\n                            getDropzoneElement(),\n                            angular.extend({clickable: getClickableElement()},settings)\n                        );\n                        // the promise for the whole upload\n\n                        $scope.currentUpload = null;\n\n                        // When a file is added to the queue\n                        dropzone.on('addedfile', function (file) {\n                            if ($scope.currentUpload === null) {\n                                $scope.$apply(startNewUpload);\n                            }\n                            var deferred = $q.defer();\n                            filesPromises[file.name] = deferred;\n                            var cancel = function () {\n                                dropzone.removeFile(file);\n                            };\n                            $scope.$apply(function($scope) {\n                                $scope.fileAdded({\n                                    dropzoneFile: file,\n                                    promise: deferred.promise,\n                                    cancel: cancel\n                                });\n                            });\n                        });\n\n                        dropzone.on('uploadprogress', function (file, progress) {\n                            $scope.$apply(function ($scope) {\n                                filesPromises[file.name].notify(progress);\n                            });\n                        });\n\n                        dropzone.on('success', function (file, response) {\n                            $scope.$apply(function ($scope) {\n                                filesPromises[file.name].resolve({file: response});\n                                $scope.fileSuccess({file: response});\n                            });\n                        });\n\n                        dropzone.on('error', function (file, response, xhr) {\n                            if (!response && xhr.status === 500) {\n                                response = settings.dictResponseError || 'Unexpected error during the upload';\n                            }\n                            if (response === 'Upload canceled.') {\n                                response = settings.dictCanceledUpload || 'The upload has been canceled';\n                            }\n                            $scope.$apply(function ($scope) {\n                                filesPromises[file.name].reject(response);\n                            });\n                        });\n\n                        dropzone.on('canceled', function (file) {\n                            var deferred = filesPromises[file.name];\n                            $scope.$apply(function ($scope) {\n                                deferred.reject(settings.dictCanceledUpload || 'The upload has been canceled');\n                            });\n                        });\n\n                        dropzone.on('complete', function (file) {\n                            if(angular.isDefined(progress)){\n                                progress.done += 1;\n                            }\n                        });\n\n                    }, true);\n\n                    // Create a new overall upload object\n                    function startNewUpload($scope) {\n                        progress = {\n                            done: 0,\n                            progress: 0\n                        };\n\n                        // upload object, encapsulate the state of the current (multi file) upload\n                        var upload = {\n                            deferred: $q.defer(),\n                            hasFileErrored: false,\n                        };\n\n                        var computeOverallProgress = function () {\n                            progress.progress = 100 * getBytes('bytesSent') / getBytes('total');\n                            progress.total = dropzone.getAcceptedFiles().length;\n                            upload.deferred.notify(progress);\n                        };\n\n                        // De-register all events\n                        dropzone\n                            .off('uploadprogress', computeOverallProgress)\n                            .off('maxfilesexceeded');\n\n                        computeOverallProgress();\n\n                        dropzone.once('error', function () {\n                            upload.hasFileErrored = true;\n                        });\n\n\n                        dropzone.on('uploadprogress', computeOverallProgress);\n\n                        var isUploadComplete = function () {\n                            return !dropzone.files.filter(function (file) {\n                                return file.status === Dropzone.QUEUED ||\n                                file.status === Dropzone.ADDED ||\n                                file.status === Dropzone.UPLOADING;\n                            }).length;\n                        };\n\n                        var stopIfComplete = function () {\n                            $scope.$apply(function ($scope) {\n                                $timeout(function () {\n                                    if ( !isUploadComplete() ) { return; }\n                                    dropzone.off('complete', stopIfComplete);\n                                    $timeout(function () {\n                                        if (upload.hasFileErrored) {\n                                            upload.deferred.reject('filehaserrored');\n                                        } else {\n                                            upload.deferred.resolve();\n                                        }\n                                    });\n                                });\n                            });\n                        };\n\n                        dropzone.on('maxfilesexceeded', function() {\n                            upload.deferred.reject('maxfilesexceeded');\n                        });\n                        dropzone.on('complete', stopIfComplete);\n\n                        $scope.currentUpload = upload.deferred.promise;\n                        $scope.uploadStart({promise: upload.deferred.promise});\n                        $scope.currentUpload.finally(function () {\n                            dropzone.removeAllFiles(true);\n                            $scope.currentUpload = null;\n                        });\n\n                    }\n\n                    $scope.$on('$destroy', function () {\n                        dropzone.destroy();\n                    });\n                }\n            };\n        }]);\n}(Dropzone));\n"],"sourceRoot":"/source/"}