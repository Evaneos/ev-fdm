{"version":3,"sources":["LeafletDirective.js"],"names":["angular","module","provider","this","$get","icons","tiles","setIcons","setTiles","directive","leafletData","evLeaflet","$log","template","restrict","scope","coordinates","defaultCoordinates","boundingbox","editable","controller","$scope","centerOnMarkerOrBoungingbox","bounds","southWest","northEast","lat","southLatitude","lng","westLongitude","northLatitude","eastLongitude","center","zoom","markers","marker","baseIcon","iconSize","shadowSize","iconAnchor","extend","copy","draggable","defaults","scrollWheelZoom","doubleClickZoom","focus","$watch","isNaN","latitude","warn","longitude","edited","icon"],"mappings":"AAAAA,QAAAC,OAAA,cAAA,sBACAC,SAAA,YAAA,WACAC,KAAAC,KAAA,WACA,OACAC,MAAAF,KAAAE,MACAC,MAAAH,KAAAG,QAIAH,KAAAI,SAAA,SAAAF,GACAF,KAAAE,MAAAA,GAGAF,KAAAK,SAAA,SAAAF,GACAH,KAAAG,MAAAA,KAGAG,UAAA,aAAA,cAAA,YAAA,OAAA,SAAAC,EAAAC,EAAAC,GACA,OACAC,SAAA,6HACAC,SAAA,KACAC,OACAC,YAAA,IACAC,mBAAA,KACAC,YAAA,KACAC,SAAA,KAEAC,WAAA,SAAAC,GAuFA,QAAAC,KACA,MAAAD,GAAAH,aACAG,EAAAE,SACAF,EAAAE,QACAC,aACAC,eAGAJ,EAAAE,OAAAC,UAAAE,IAAAL,EAAAH,YAAAS,cACAN,EAAAE,OAAAC,UAAAI,IAAAP,EAAAH,YAAAW,cACAR,EAAAE,OAAAE,UAAAC,IAAAL,EAAAH,YAAAY,mBACAT,EAAAE,OAAAE,UAAAG,IAAAP,EAAAH,YAAAa,iBAIAV,EAAAW,SACAX,EAAAW,QAAAC,KAAA,IAEAZ,EAAAW,OAAAN,IAAAL,EAAAa,QAAAC,OAAAT,SACAL,EAAAW,OAAAJ,IAAAP,EAAAa,QAAAC,OAAAP,MAvGA,GAAAQ,IACAC,UAAA,GAAA,IACAC,YAAA,EAAA,GACAC,YAAA,EAAA,KAGAlC,EAAAM,EAAAN,KAEA,YAAAA,IACAL,QAAAwC,OAAAxC,QAAAyC,KAAAL,GAAA/B,EAAAA,YAEA,aAAAA,IACAL,QAAAwC,OAAAxC,QAAAyC,KAAAL,GAAA/B,EAAAqC,UAGA,IAAApC,GAAAK,EAAAL,KACAA,KACAe,EAAAf,MAAAA,GAGAe,EAAAsB,UACAC,iBAAA,EACAC,iBAAA,GAIAxB,EAAAa,SACAC,QACAW,OAAA,IAKAzB,EAAA0B,OAAA,uBAAA,SAAArB,IACAsB,MAAAtB,IAAA,MAAAA,KAEAA,EADAL,EAAAJ,oBAAA,MAAAI,EAAAJ,mBAAAgC,SACA5B,EAAAJ,mBAAAgC,SAEA,EAEArC,EAAAsC,KAAA,yCAGA7B,EAAAa,QAAAC,OAAAT,KAAAA,IACAL,EAAAa,QAAAC,OAAAT,IAAAA,EACAJ,OAIAD,EAAA0B,OAAA,wBAAA,SAAAnB,IACAoB,MAAApB,IAAA,MAAAA,KAEAA,EADAP,EAAAJ,oBAAA,MAAAI,EAAAJ,mBAAAkC,UACA9B,EAAAJ,mBAAAkC,UAEA,EAEAvC,EAAAsC,KAAA,0CAGA7B,EAAAa,QAAAC,OAAAP,KAAAA,IACAP,EAAAa,QAAAC,OAAAP,IAAAA,EACAN,OAIAA,IAEAD,EAAA0B,OAAA,cAAA,SAAA7B,GACAI,MAGAD,EAAA0B,OAAA,qBAAA,SAAArB,GACA,MAAAA,GAAAL,EAAAF,WACAE,EAAAL,YAAAiC,SAAAvB,KAIAL,EAAA0B,OAAA,qBAAA,SAAAnB,GACA,MAAAA,GAAAP,EAAAF,WACAE,EAAAL,YAAAmC,UAAAvB,KA2BAP,EAAA0B,OAAA,WAAA,WACA,GAAAK,GAAA/B,EAAAF,QACAE,GAAAa,QAAAC,OAAAkB,KAAAD,EAAA/C,EAAAqC,UAAArC,EAAA,WACAgB,EAAAa,QAAAC,OAAAO,UAAAU","file":"ev-fdm-leaflet.min.js","sourcesContent":["angular.module('ev-leaflet', ['leaflet-directive'])\n    .provider('evLeaflet', function() {\n        this.$get = function() {\n            return {\n                icons: this.icons,\n                tiles: this.tiles\n            };\n        };\n\n        this.setIcons = function(icons) {\n            this.icons = icons;\n        };\n\n        this.setTiles = function(tiles) {\n            this.tiles = tiles;\n        };\n    })\n    .directive('evLeaflet', ['leafletData', 'evLeaflet', '$log', function (leafletData, evLeaflet, $log) {\n        return {\n            template: '<leaflet class=\"ev-leaflet\" defaults=\"defaults\" markers=\"markers\" center=\"center\" tiles=\"tiles\" bounds=\"bounds\"></leaflet>',\n            restrict: 'AE',\n            scope: {\n                coordinates: '=',\n                defaultCoordinates: '=?',\n                boundingbox: '=?',\n                editable: '='\n            },\n            controller: function($scope) {\n\n                // Icons settings\n                var baseIcon = {\n                    iconSize:   [40, 40],\n                    shadowSize: [1, 1],\n                    iconAnchor: [1, 20]\n                };\n\n                var icons = evLeaflet.icons;\n\n                if ('default' in icons) {\n                    angular.extend(angular.copy(baseIcon), icons.default);\n                }\n                if ('draggable' in icons) {\n                    angular.extend(angular.copy(baseIcon), icons.draggable);\n                }\n\n                var tiles = evLeaflet.tiles;\n                if (tiles) {\n                    $scope.tiles = tiles;\n                }\n\n                $scope.defaults = {\n                    scrollWheelZoom: false,\n                    doubleClickZoom: false\n                };\n\n                // Setting a marker in location\n                $scope.markers = {\n                    marker: {\n                        focus: true\n                    }\n                };\n\n                // Double binding between coordinates and marker's position\n                $scope.$watch('coordinates.latitude', function(lat) {\n                    if (isNaN(lat) || lat == null) { // simple == : null or undefined\n                        if ($scope.defaultCoordinates && $scope.defaultCoordinates.latitude != null) {\n                            lat = $scope.defaultCoordinates.latitude;\n                        } else {\n                            lat = 0;\n                        }\n                        $log.warn('ev-leaflet: latitude is not a number');\n                    }\n\n                    if ($scope.markers.marker.lat != lat) {\n                        $scope.markers.marker.lat = lat;\n                        centerOnMarkerOrBoungingbox();\n                    }\n                });\n\n                $scope.$watch('coordinates.longitude', function(lng) {\n                    if (isNaN(lng) || lng == null) { // simple == : null or undefined\n                        if ($scope.defaultCoordinates && $scope.defaultCoordinates.longitude != null) {\n                            lng = $scope.defaultCoordinates.longitude;\n                        } else {\n                            lng = 0;\n                        }\n                        $log.warn('ev-leaflet: longitude is not a number');\n                    }\n\n                    if ($scope.markers.marker.lng != lng) {\n                        $scope.markers.marker.lng = lng;\n                        centerOnMarkerOrBoungingbox();\n                    }\n                });\n\n                centerOnMarkerOrBoungingbox();\n\n                $scope.$watch('boundingbox', function(boundingbox) {\n                    centerOnMarkerOrBoungingbox();\n                });\n\n                $scope.$watch('markers.marker.lat', function(lat) {\n                    if (lat != null && $scope.editable) {\n                        $scope.coordinates.latitude = lat;\n                    }\n                });\n\n                $scope.$watch('markers.marker.lng', function(lng) {\n                    if (lng != null && $scope.editable) {\n                        $scope.coordinates.longitude = lng;\n                    }\n                });\n\n                // Setting map center\n                function centerOnMarkerOrBoungingbox() {\n                    if ($scope.boundingbox) {\n                        if (!$scope.bounds) {\n                            $scope.bounds = {\n                                southWest: {},\n                                northEast: {},\n                            };\n                        }\n                        $scope.bounds.southWest.lat = $scope.boundingbox.southLatitude;\n                        $scope.bounds.southWest.lng = $scope.boundingbox.westLongitude;\n                        $scope.bounds.northEast.lat = $scope.boundingbox.northLatitude;\n                        $scope.bounds.northEast.lng = $scope.boundingbox.eastLongitude;\n                        return;\n                    }\n\n                    if (!$scope.center) {\n                        $scope.center = { zoom: 8 };\n                    }\n                    $scope.center.lat = $scope.markers.marker.lat;\n                    $scope.center.lng = $scope.markers.marker.lng;\n                }\n\n                $scope.$watch('editable', function () {\n                    var edited = $scope.editable;\n                    $scope.markers.marker.icon = edited ? icons.draggable : icons['default'];\n                    $scope.markers.marker.draggable = edited;\n                });\n            }\n        };\n    }]);\n"],"sourceRoot":"/source/"}