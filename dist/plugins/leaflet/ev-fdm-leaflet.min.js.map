{"version":3,"sources":["LeafletDirective.js"],"names":[],"mappings":"AAAA,QAAA,OAAA,cAAA,sBACA,SAAA,YAAA,WACA,KAAA,KAAA,WACA,OAAA,MAAA,KAAA,QAGA,KAAA,SAAA,SAAA,GACA,KAAA,MAAA,KAGA,UAAA,aAAA,cAAA,YAAA,OAAA,SAAA,EAAA,EAAA,GACA,OACA,SAAA,+FACA,SAAA,KACA,OACA,YAAA,IACA,mBAAA,KACA,SAAA,KAEA,WAAA,SAAA,GA0EA,QAAA,KACA,EAAA,QAOA,EAAA,OAAA,IAAA,EAAA,QAAA,OAAA,IACA,EAAA,OAAA,IAAA,EAAA,QAAA,OAAA,KAPA,EAAA,QACA,IAAA,EAAA,QAAA,OAAA,IACA,IAAA,EAAA,QAAA,OAAA,IACA,KAAA,GA5EA,GAAA,IACA,UAAA,GAAA,IACA,YAAA,EAAA,GACA,YAAA,EAAA,KAGA,EAAA,EAAA,KAEA,YAAA,IACA,QAAA,OAAA,QAAA,KAAA,GAAA,EAAA,SAEA,aAAA,IACA,QAAA,OAAA,QAAA,KAAA,GAAA,EAAA,WAIA,EAAA,UACA,iBAAA,EACA,iBAAA,GAIA,EAAA,SACA,QACA,OAAA,IAKA,EAAA,OAAA,uBAAA,SAAA,IACA,MAAA,IAAA,MAAA,KAEA,EADA,EAAA,oBAAA,MAAA,EAAA,mBAAA,SACA,EAAA,mBAAA,SAEA,EAEA,EAAA,KAAA,yCAEA,EAAA,QAAA,OAAA,IAAA,EACA,MAGA,EAAA,OAAA,wBAAA,SAAA,IACA,MAAA,IAAA,MAAA,KAEA,EADA,EAAA,oBAAA,MAAA,EAAA,mBAAA,UACA,EAAA,mBAAA,UAEA,EAEA,EAAA,KAAA,0CAEA,EAAA,QAAA,OAAA,IAAA,EACA,MAGA,IAGA,EAAA,OAAA,qBAAA,SAAA,GACA,MAAA,GAAA,EAAA,WACA,EAAA,YAAA,SAAA,KAIA,EAAA,OAAA,qBAAA,SAAA,GACA,MAAA,GAAA,EAAA,WACA,EAAA,YAAA,UAAA,KAkBA,EAAA,OAAA,WAAA,WACA,GAAA,GAAA,EAAA,QACA,GAAA,QAAA,OAAA,KAAA,EAAA,EAAA,UAAA,EAAA,WACA,EAAA,QAAA,OAAA,UAAA","file":"ev-fdm-leaflet.min.js","sourcesContent":["angular.module('ev-leaflet', ['leaflet-directive'])\n    .provider('evLeaflet', function() {\n        this.$get =function () {\n            return {icons: this.icons};\n        };\n\n        this.setIcons =function (icons) {\n            this.icons = icons;\n        };\n    })\n    .directive('evLeaflet', ['leafletData', 'evLeaflet', '$log', function (leafletData, evLeaflet, $log) {\n        return {\n            template: '<leaflet class=\"ev-leaflet\" defaults=\"defaults\" markers=\"markers\" center=\"center\"></leaflet>',\n            restrict: 'AE',\n            scope: {\n                coordinates: '=',\n                defaultCoordinates: '=?',\n                editable: '='\n            },\n            controller: function($scope) {\n\n                // Icons settings\n                var baseIcon = {\n                    iconSize:   [40, 40],\n                    shadowSize: [1, 1],\n                    iconAnchor: [1, 20]\n                };\n\n                var icons = evLeaflet.icons;\n\n                if ('default' in icons) {\n                    angular.extend(angular.copy(baseIcon), icons.default);\n                }\n                if ('draggable' in icons) {\n                    angular.extend(angular.copy(baseIcon), icons.draggable);\n                }\n\n\n                $scope.defaults = {\n                    scrollWheelZoom: false,\n                    doubleClickZoom: false\n                };\n\n                // Setting a marker in location\n                $scope.markers = {\n                    marker: {\n                        focus: true\n                    }\n                };\n\n                // Double binding between coordinates and marker's position\n                $scope.$watch('coordinates.latitude', function(lat) {\n                    if (isNaN(lat) || lat == null) { // simple == : null or undefined\n                        if ($scope.defaultCoordinates && $scope.defaultCoordinates.latitude != null) {\n                            lat = $scope.defaultCoordinates.latitude;\n                        } else {\n                            lat = 0;\n                        }\n                        $log.warn('ev-leaflet: latitude is not a number');\n                    }\n                    $scope.markers.marker.lat = lat;\n                    centerOnMarker();\n                });\n\n                $scope.$watch('coordinates.longitude', function(lng) {\n                    if (isNaN(lng) || lng == null) { // simple == : null or undefined\n                        if ($scope.defaultCoordinates && $scope.defaultCoordinates.longitude != null) {\n                            lng = $scope.defaultCoordinates.longitude;\n                        } else {\n                            lng = 0;\n                        }\n                        $log.warn('ev-leaflet: longitude is not a number');\n                    }\n                    $scope.markers.marker.lng = lng;\n                    centerOnMarker();\n                });\n\n                centerOnMarker();\n\n\n                $scope.$watch('markers.marker.lat', function(lat) {\n                    if (lat != null && $scope.editable) {\n                        $scope.coordinates.latitude = lat;\n                    }\n                });\n\n                $scope.$watch('markers.marker.lng', function(lng) {\n                    if (lng != null && $scope.editable) {\n                        $scope.coordinates.longitude = lng;\n                    }\n                });\n\n                // Setting map center\n                function centerOnMarker() {\n                    if (!$scope.center) {\n                        $scope.center = {\n                            lat: $scope.markers.marker.lat,\n                            lng: $scope.markers.marker.lng,\n                            zoom: 8\n                        };\n                    } else {\n                        $scope.center.lat = $scope.markers.marker.lat;\n                        $scope.center.lng = $scope.markers.marker.lng;\n                    }\n                }\n\n                $scope.$watch('editable', function () {\n                    var edited = $scope.editable;\n                    $scope.markers.marker.icon = edited ? icons.draggable : icons['default'];\n                    $scope.markers.marker.draggable = edited;\n                });\n            }\n        };\n    }]);\n"],"sourceRoot":"/source/"}