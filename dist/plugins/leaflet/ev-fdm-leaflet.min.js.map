{"version":3,"sources":["LeafletDirective.js"],"names":["angular","module","provider","this","$get","icons","setIcons","directive","leafletData","evLeaflet","$log","template","restrict","scope","coordinates","defaultCoordinates","editable","controller","$scope","centerOnMarker","center","lat","markers","marker","lng","zoom","baseIcon","iconSize","shadowSize","iconAnchor","extend","copy","draggable","defaults","scrollWheelZoom","doubleClickZoom","focus","$watch","isNaN","latitude","warn","longitude","edited","icon"],"mappings":"AAAAA,QAAAC,OAAA,cAAA,sBACAC,SAAA,YAAA,WACAC,KAAAC,KAAA,WACA,OAAAC,MAAAF,KAAAE,QAGAF,KAAAG,SAAA,SAAAD,GACAF,KAAAE,MAAAA,KAGAE,UAAA,aAAA,cAAA,YAAA,OAAA,SAAAC,EAAAC,EAAAC,GACA,OACAC,SAAA,+FACAC,SAAA,KACAC,OACAC,YAAA,IACAC,mBAAA,KACAC,SAAA,KAEAC,WAAA,SAAAC,GA0EA,QAAAC,KACAD,EAAAE,QAOAF,EAAAE,OAAAC,IAAAH,EAAAI,QAAAC,OAAAF,IACAH,EAAAE,OAAAI,IAAAN,EAAAI,QAAAC,OAAAC,KAPAN,EAAAE,QACAC,IAAAH,EAAAI,QAAAC,OAAAF,IACAG,IAAAN,EAAAI,QAAAC,OAAAC,IACAC,KAAA,GA5EA,GAAAC,IACAC,UAAA,GAAA,IACAC,YAAA,EAAA,GACAC,YAAA,EAAA,KAGAxB,EAAAI,EAAAJ,KAEA,YAAAA,IACAL,QAAA8B,OAAA9B,QAAA+B,KAAAL,GAAArB,EAAAA,YAEA,aAAAA,IACAL,QAAA8B,OAAA9B,QAAA+B,KAAAL,GAAArB,EAAA2B,WAIAd,EAAAe,UACAC,iBAAA,EACAC,iBAAA,GAIAjB,EAAAI,SACAC,QACAa,OAAA,IAKAlB,EAAAmB,OAAA,uBAAA,SAAAhB,IACAiB,MAAAjB,IAAA,MAAAA,KAEAA,EADAH,EAAAH,oBAAA,MAAAG,EAAAH,mBAAAwB,SACArB,EAAAH,mBAAAwB,SAEA,EAEA7B,EAAA8B,KAAA,yCAEAtB,EAAAI,QAAAC,OAAAF,IAAAA,EACAF,MAGAD,EAAAmB,OAAA,wBAAA,SAAAb,IACAc,MAAAd,IAAA,MAAAA,KAEAA,EADAN,EAAAH,oBAAA,MAAAG,EAAAH,mBAAA0B,UACAvB,EAAAH,mBAAA0B,UAEA,EAEA/B,EAAA8B,KAAA,0CAEAtB,EAAAI,QAAAC,OAAAC,IAAAA,EACAL,MAGAA,IAGAD,EAAAmB,OAAA,qBAAA,SAAAhB,GACA,MAAAA,GAAAH,EAAAF,WACAE,EAAAJ,YAAAyB,SAAAlB,KAIAH,EAAAmB,OAAA,qBAAA,SAAAb,GACA,MAAAA,GAAAN,EAAAF,WACAE,EAAAJ,YAAA2B,UAAAjB,KAkBAN,EAAAmB,OAAA,WAAA,WACA,GAAAK,GAAAxB,EAAAF,QACAE,GAAAI,QAAAC,OAAAoB,KAAAD,EAAArC,EAAA2B,UAAA3B,EAAA,WACAa,EAAAI,QAAAC,OAAAS,UAAAU","file":"ev-fdm-leaflet.min.js","sourcesContent":["angular.module('ev-leaflet', ['leaflet-directive'])\n    .provider('evLeaflet', function() {\n        this.$get =function () {\n            return {icons: this.icons};\n        };\n\n        this.setIcons =function (icons) {\n            this.icons = icons;\n        };\n    })\n    .directive('evLeaflet', ['leafletData', 'evLeaflet', '$log', function (leafletData, evLeaflet, $log) {\n        return {\n            template: '<leaflet class=\"ev-leaflet\" defaults=\"defaults\" markers=\"markers\" center=\"center\"></leaflet>',\n            restrict: 'AE',\n            scope: {\n                coordinates: '=',\n                defaultCoordinates: '=?',\n                editable: '='\n            },\n            controller: function($scope) {\n\n                // Icons settings\n                var baseIcon = {\n                    iconSize:   [40, 40],\n                    shadowSize: [1, 1],\n                    iconAnchor: [1, 20]\n                };\n\n                var icons = evLeaflet.icons;\n\n                if ('default' in icons) {\n                    angular.extend(angular.copy(baseIcon), icons.default);\n                }\n                if ('draggable' in icons) {\n                    angular.extend(angular.copy(baseIcon), icons.draggable);\n                }\n\n\n                $scope.defaults = {\n                    scrollWheelZoom: false,\n                    doubleClickZoom: false\n                };\n\n                // Setting a marker in location\n                $scope.markers = {\n                    marker: {\n                        focus: true\n                    }\n                };\n\n                // Double binding between coordinates and marker's position\n                $scope.$watch('coordinates.latitude', function(lat) {\n                    if (isNaN(lat) || lat == null) { // simple == : null or undefined\n                        if ($scope.defaultCoordinates && $scope.defaultCoordinates.latitude != null) {\n                            lat = $scope.defaultCoordinates.latitude;\n                        } else {\n                            lat = 0;\n                        }\n                        $log.warn('ev-leaflet: latitude is not a number');\n                    }\n                    $scope.markers.marker.lat = lat;\n                    centerOnMarker();\n                });\n\n                $scope.$watch('coordinates.longitude', function(lng) {\n                    if (isNaN(lng) || lng == null) { // simple == : null or undefined\n                        if ($scope.defaultCoordinates && $scope.defaultCoordinates.longitude != null) {\n                            lng = $scope.defaultCoordinates.longitude;\n                        } else {\n                            lng = 0;\n                        }\n                        $log.warn('ev-leaflet: longitude is not a number');\n                    }\n                    $scope.markers.marker.lng = lng;\n                    centerOnMarker();\n                });\n\n                centerOnMarker();\n\n\n                $scope.$watch('markers.marker.lat', function(lat) {\n                    if (lat != null && $scope.editable) {\n                        $scope.coordinates.latitude = lat;\n                    }\n                });\n\n                $scope.$watch('markers.marker.lng', function(lng) {\n                    if (lng != null && $scope.editable) {\n                        $scope.coordinates.longitude = lng;\n                    }\n                });\n\n                // Setting map center\n                function centerOnMarker() {\n                    if (!$scope.center) {\n                        $scope.center = {\n                            lat: $scope.markers.marker.lat,\n                            lng: $scope.markers.marker.lng,\n                            zoom: 8\n                        };\n                    } else {\n                        $scope.center.lat = $scope.markers.marker.lat;\n                        $scope.center.lng = $scope.markers.marker.lng;\n                    }\n                }\n\n                $scope.$watch('editable', function () {\n                    var edited = $scope.editable;\n                    $scope.markers.marker.icon = edited ? icons.draggable : icons['default'];\n                    $scope.markers.marker.draggable = edited;\n                });\n            }\n        };\n    }]);\n"],"sourceRoot":"/source/"}