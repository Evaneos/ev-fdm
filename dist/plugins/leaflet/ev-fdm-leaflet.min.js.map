{"version":3,"sources":["LeafletDirective.js"],"names":[],"mappings":"AAAA,QAAA,OAAA,cAAA,sBACA,SAAA,YAAA,WACA,KAAA,KAAA,WACA,OAAA,MAAA,KAAA,QAGA,KAAA,SAAA,SAAA,GACA,KAAA,MAAA,KAGA,UAAA,aAAA,cAAA,YAAA,OAAA,SAAA,EAAA,EAAA,GACA,OACA,SAAA,+FACA,SAAA,KACA,OACA,WAAA,IACA,SAAA,KAEA,WAAA,SAAA,GA4DA,QAAA,KACA,EAAA,QACA,IAAA,EAAA,QAAA,OAAA,IACA,IAAA,EAAA,QAAA,OAAA,IACA,KAAA,GA7DA,GAAA,IACA,UAAA,GAAA,IACA,YAAA,EAAA,GACA,YAAA,EAAA,KAGA,EAAA,EAAA,KAEA,YAAA,IACA,QAAA,OAAA,EAAA,QAAA,GAEA,aAAA,IACA,QAAA,OAAA,EAAA,UAAA,GAIA,EAAA,UACA,iBAAA,EACA,iBAAA,GAIA,EAAA,SACA,QACA,OAAA,IAGA,IAGA,EAAA,OAAA,sBAAA,SAAA,GACA,MAAA,KACA,EAAA,EACA,EAAA,KAAA,yCAEA,EAAA,QAAA,OAAA,IAAA,EACA,MAGA,EAAA,OAAA,uBAAA,SAAA,GACA,MAAA,KACA,EAAA,EACA,EAAA,KAAA,0CAEA,EAAA,QAAA,OAAA,IAAA,EACA,MAGA,EAAA,OAAA,qBAAA,SAAA,GACA,EAAA,WAAA,SAAA,IAGA,EAAA,OAAA,qBAAA,SAAA,GACA,EAAA,WAAA,UAAA,IAYA,EAAA,OAAA,WAAA,WACA,GAAA,GAAA,EAAA,QACA,GAAA,QAAA,OAAA,KAAA,EAAA,EAAA,UAAA,EAAA,WACA,EAAA,QAAA,OAAA,UAAA","file":"ev-fdm-leaflet.min.js","sourcesContent":["angular.module('ev-leaflet', ['leaflet-directive'])\n    .provider('evLeaflet', function() {\n        this.$get =function () {\n            return {icons: this.icons};\n        };\n\n        this.setIcons =function (icons) {\n            this.icons = icons;\n        };\n    })\n    .directive('evLeaflet', ['leafletData', 'evLeaflet', '$log', function (leafletData, evLeaflet, $log) {\n        return {\n            template: '<leaflet class=\"ev-leaflet\" defaults=\"defaults\" markers=\"markers\" center=\"center\"></leaflet>',\n            restrict: 'AE',\n            scope: {\n                coordinate: '=',\n                editable: '='\n            },\n            controller:function ($scope) {\n\n                // Icons settings\n                var baseIcon = {\n                    iconSize:   [40, 40],\n                    shadowSize: [1, 1],\n                    iconAnchor: [1, 20]\n                };\n\n                var icons = evLeaflet.icons;\n\n                if ('default' in icons) {\n                    angular.extend(icons.default, baseIcon);\n                }\n                if ('draggable' in icons) {\n                    angular.extend(icons.draggable, baseIcon);\n                }\n\n\n                $scope.defaults = {\n                    scrollWheelZoom: false,\n                    doubleClickZoom: false\n                };\n\n                // Setting a marker in location\n                $scope.markers = {\n                    marker: {\n                        focus: true\n                    }\n                };\n                centerOnMarker();\n\n                // Double binding between coordinate and marker's position\n                $scope.$watch('coordinate.latitude', function (lat) {\n                    if(isNaN(lat)) {\n                        lat = 0;\n                        $log.warn('ev-leaflet: latitude is not a number');\n                    }\n                    $scope.markers.marker.lat = lat;\n                    centerOnMarker();\n                });\n\n                $scope.$watch('coordinate.longitude', function (lng) {\n                    if(isNaN(lng)) {\n                        lng = 0;\n                        $log.warn('ev-leaflet: longitude is not a number');\n                    }\n                    $scope.markers.marker.lng = lng;\n                    centerOnMarker();\n                });\n\n                $scope.$watch('markers.marker.lat', function (lat) {\n                    $scope.coordinate.latitude = lat;\n                });\n\n                $scope.$watch('markers.marker.lng', function (lng) {\n                    $scope.coordinate.longitude = lng;\n                });\n\n                // Setting map center\n                function centerOnMarker() {\n                    $scope.center = {\n                        lat: $scope.markers.marker.lat,\n                        lng: $scope.markers.marker.lng,\n                        zoom: 8\n                    };\n                }\n\n                $scope.$watch('editable', function () {\n                    var edited = $scope.editable;\n                    $scope.markers.marker.icon = edited ? icons.draggable : icons['default'];\n                    $scope.markers.marker.draggable = edited;\n                });\n            }\n        };\n    }]);\n"],"sourceRoot":"/source/"}