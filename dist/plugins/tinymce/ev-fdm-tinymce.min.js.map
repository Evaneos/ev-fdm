{"version":3,"file":"ev-fdm-tinymce.min.js","sources":["directives/tinymceDirective.js"],"names":[],"mappings":"AASA,QAAA,OAAA,cAAA,eACA,UAAA,aAAA,WACA,OACA,SAAA,mLAIA,SAAA,KACA,SAAA,EACA,OACA,QAAA,IACA,eAAA,IACA,WAAA,KAEA,YAAA,SAAA,SAAA,WAAA,SAAA,EAAA,EAAA,GACA,EAAA,IAAA,wBAAA,WACA,GAAA,GAAA,EAAA,KAAA,YAAA,KAAA,MACA,EAAA,OAAA,QACA,EAAA,EAAA,IAAA,EAEA,IAAA,EACA,IACA,EAAA,SACA,EAAA,YAAA,gBAAA,EAAA,GACA,MAAA,MAIA,IAAA,IACA,SAAA,EACA,WAAA,EACA,QAAA,EACA,QAAA,qEACA,YAAA,mDACA,MAAA,EACA,aAAA,EACA,wBAAA,EAWA,GAAA,oBAAA,QAAA,UAAA,EAAA,EAAA,gBAMA,EAAA,oBAAA,SAAA,EAAA,UAAA,EAAA,oBAAA,UAAA,IAGA,IAAA,GAAA,GAKA,EAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,SAAA,KAAA,kBACA,GAAA,KAAA,EAAA,MAAA,EAEA,IAAA,GAAA,EAAA,EAAA,IAAA,EACA,EAAA,GAAA,EAEA,EAAA,oBACA,EAAA,mBACA,GACA,EAAA,SAAA,GAEA,EAAA,YAAA,GAGA,EACA,EAAA,SAAA,GAEA,EAAA,YAAA,IAOA,EAAA,SAAA,GAEA,GAAA,OAAA,EAAA,oBAAA,SAAA,CAIA,GAAA,GAAA,GACA,EAAA,GACA,EAAA,GACA,EAAA,EAAA,oBAAA,QAEA,GAAA,GAAA,OAAA,WACA,EAAA,OAAA,WAAA,MAAA,GAAA,cAAA,SAAA,EAAA,GACA,EAAA,QAAA,QAAA,GAAA,OACA,EAAA,EAAA,OACA,EAAA,QAAA,QAAA,GAAA,MAOA,IAAA,GAAA,EAAA,OAAA,GAAA,EAAA,CACA,IAAA,EAAA,CACA,GAAA,GAAA,EAAA,UAAA,EAAA,EACA,GAAA,QAAA,EACA,EAAA,EAAA,WAEA,GAAA,IACA,EAAA,QAAA,EACA,EAAA,QAAA,QAAA,EAAA,SAAA,OAAA,OAGA,GAAA,EAAA,QAKA,GAAA,oBAAA,MAAA","sourcesContent":["/**\n * Directive to override some settings in tinymce\n * Usage:\n * <ev-tinymce\n *     max-chars=\"1000\"                        -- maxChars this input accept (default: unlimited)\n *     ng-model=\"message.body\"                 -- ng-model\n *     tinymce-options=\"tinymceOptions\"        -- override default options with yours (object expected)\n *  ></ev-tinymce>\n */\nangular.module('ev-tinymce', ['ui.tinymce'])\n    .directive('evTinymce', [function () {\n        return {\n            template: '<div class=\"tiny-mce-wrapper\">'\n                + '<textarea ui-tinymce=\"tinymceFinalOptions\" ng-model=\"ngModel\" ng-required=\"ngRequired\"></textarea>'\n                + '<span class=\"max-chars-info\">&nbsp;</span>'\n                + '</div>',\n            restrict: 'AE',\n            replace: false,\n            scope: {\n                ngModel: '=',\n                tinymceOptions: '=',\n                ngRequired: '&'\n            },\n            controller: ['$scope', '$attrs', '$element', function($scope, $attrs, $element) {\n                $scope.$on('module-layout-changed', function() {\n                    var textareaId = $element.find('textarea').attr('id'),\n                        tinyMCE = window.tinyMCE,\n                        editor = tinyMCE.get(textareaId);\n\n                    if (editor) {\n                        try {\n                            editor.remove();\n                            tinyMCE.execCommand(\"mceAddEditor\", false, textareaId);\n                        } catch (e) {}\n                    }\n                });\n\n                var defaultOptions = {\n                    menubar: false,\n                    statusbar: false,\n                    resize: false,\n                    toolbar: 'bold italic underline | alignleft aligncenter alignright | bullist',\n                    'content_css': '/bower_components/ev-fdm/dist/css/ev-fdm.min.css',\n                    skin: false,\n                    'verify_html': true,\n                    'convert_fonts_to_spans': true,\n\n                    // We choose to have a restrictive approach here.\n                    // The aim is to output the cleanest html possible.\n                    // See http://www.tinymce.com/wiki.php/Configuration:valid_elements\n                    // 'valid_elements':\n                    //     'strong,em' +\n                    //     'span[!style<text-decoration: underline;],' +\n                    //     '@[style<text-align: right;?text-align: left;?text-align: center;],' +\n                    //     'p,!div,ul,li'\n                };\n                $scope.tinymceFinalOptions = angular.extend({}, defaultOptions, $scope.tinymceOptions);\n\n                /**\n                 * This part is used for the max-chars attibute.\n                 * It allows us to easily limit the number of characters typed in the editor\n                 */\n                $scope.tinymceFinalOptions.maxChars = $attrs.maxChars || $scope.tinymceFinalOptions.maxChars || null;\n                // We set the max char warning when the THRESHOLD is reached\n                // Here, it's 85% of max chars\n                var THRESHOLD = 85;\n\n                /**\n                 * Update the information area about the textEditor state (maxChars, ..)\n                 */\n                var updateInfo = function(currentChars, maxChars) {\n                    var maxCharInfosElm = $element.parent().find('.max-chars-info');\n                    maxCharInfosElm.text(currentChars + ' / ' + maxChars);\n\n                    var isThresholdReached = ((currentChars / maxChars) * 100) > THRESHOLD;\n                    var isMaxLimitReached  = currentChars >= maxChars;\n\n                    var warningClassName = 'max-chars-warning';\n                    var alertClassName   = 'max-chars-reached';\n                    if(isThresholdReached) {\n                        maxCharInfosElm.addClass(warningClassName);\n                    } else {\n                        maxCharInfosElm.removeClass(warningClassName);\n                    }\n\n                    if(isMaxLimitReached) {\n                            maxCharInfosElm.addClass(alertClassName);\n                    } else {\n                            maxCharInfosElm.removeClass(alertClassName);\n                    }\n                };\n\n                /**\n                 * Setup and listen to the editor events\n                 */\n                var setup = function(editor) {\n                    // If there is no maxChars options defined, we return\n                    if($scope.tinymceFinalOptions.maxChars === null) {\n                        return;\n                    }\n\n                    var currentText       = '';\n                    var currentTextLength = '';\n                    var oldText           = '';\n                    var maxChars          = $scope.tinymceFinalOptions.maxChars;\n\n                    editor.on('init', function(e) {\n                       $scope.$watch(function() { return editor.getContent(); }, function(newHtml, oldHtml) {\n                            currentText       = angular.element(newHtml).text();\n                            currentTextLength = currentText.length;\n                            oldText           = angular.element(oldHtml).text();\n\n                            /**\n                             * Specific case where the old and new text are both over the limit of max chars.\n                             * This case can occur on the first initilization, if data from DB are over the limit.\n                             * For now, we substring the content (but that break the html and everything..)\n                             */\n                            var isLimitAlert = (oldText.length > maxChars) && (currentTextLength > maxChars);\n                            if(isLimitAlert) {\n                                var shorterText = oldText.substring(0, maxChars);\n                                $scope.ngModel = shorterText;\n                                currentTextLength = shorterText.length;\n\n                            } else if(currentTextLength > maxChars) {\n                                $scope.ngModel    = oldHtml;\n                                currentTextLength = angular.element($scope.ngModel).text().length;\n                            }\n\n                            updateInfo(currentTextLength, maxChars);\n                        });\n                    });\n                };\n\n                $scope.tinymceFinalOptions.setup = setup;\n            }]\n        };\n    }]);\n"],"sourceRoot":"/source/"}