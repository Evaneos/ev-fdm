{"version":3,"sources":["directives/tinymceDirective.js"],"names":[],"mappings":"CAUA,SAAA,GACA,GAAA,IACA,SAAA,EACA,WAAA,EAEA,QAAA,qEAEA,aAAA,EACA,wBAAA,EAEA,QAAA,EAaA,SAAA,OAAA,iBACA,UAAA,aAAA,WAEA,GAAA,GAAA,CACA,QACA,SAAA,+JAKA,SAAA,KACA,SAAA,EACA,QAAA,WACA,OACA,eAAA,KAGA,KAAA,SAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,WAEA,GADA,EAAA,cAAA,EAAA,QACA,KAAA,EAAA,QAAA,KAAA,EAAA,OAAA,CACA,GAAA,CACA,IAAA,GAAA,GACA,IACA,EAAA,WAAA,6BAAA,EAAA,YAAA,WAGA,EAAA,MAAA,SACA,EAAA,UAGA,EAAA,YAAA,IACA,EAAA,EAAA,KAAA,sBACA,GAAA,KAAA,KAAA,GACA,EAAA,KAAA,uBAAA,KAAA,KAAA,EAAA,UAEA,IAAA,GACA,EAAA,WAIA,MAHA,KACA,EAAA,EAAA,IAAA,IAEA,GAEA,EAAA,QAAA,QACA,wBAAA,IAAA,EAAA,WACA,EAAA,EAAA,gBAwCA,EAAA,SAAA,GACA,EAAA,GAAA,OAAA,WACA,EAAA,YAGA,EAAA,GAAA,cAAA,WAEA,MAGA,EAAA,GAAA,QAAA,WAEA,MAGA,EAAA,GAAA,aAAA,SAAA,GACA,EAAA,SAEA,MAGA,EAAA,GAAA,OAAA,WACA,EAAA,OACA,GACA,EAAA,YAIA,EAAA,GAAA,QAAA,WACA,QAAA,IAAA,GACA,IACA,EAAA,WAAA,IACA,GAAA,KAwCA,GAAA,MAAA,EACA,EAAA,MAAA,EACA,EAAA,KAAA,QAEA,EAAA,KAAA,GACA,EAAA,YAAA,mBAAA,EAAA,EACA,IAAA,IAAA,CAEA,GAAA,QAAA,WACA,GAAA,GAAA,GACA,KAIA,EAAA,YAAA,KAAA,EAAA,WAIA,EAAA,WAAA,EAAA,aAHA,GAAA,EACA,EAAA,WAAA,6BAAA,EAAA,YAAA,cAMA,QAAA,IAAA,eAUA,OAAA","file":"ev-fdm-tinymce.min.js","sourcesContent":["/* jshint camelcase: false */\n/**\n * Directive to override some settings in tinymce\n * Usage:\n * <ev-tinymce\n *     max-chars=\"1000\"                        -- maxChars this input accept (default: unlimited)\n *     ng-model=\"message.body\"                 -- ng-model\n *     tinymce-options=\"tinymceOptions\"        -- override default options with yours (object expected)\n *  ></ev-tinymce>\n */\n(function (tinyMCE) {\n    var defaultOptions = {\n        menubar: false,\n        statusbar: false,\n        //resize: false,\n        toolbar: 'bold italic underline | alignleft aligncenter alignright | bullist',\n        //skin: false,\n        'verify_html': true,\n        'convert_fonts_to_spans': true,\n        //'content_css': '/bower_components/ev-fdm/dist/css/ev-fdm.min.css',\n        inline: true,\n\n        // We choose to have a restrictive approach here.\n        // The aim is to output the cleanest html possible.\n        // See http://www.tinymce.com/wiki.php/Configuration:valid_elements\n        // 'valid_elements':\n        //     'strong,em' +\n        //     'span[!style<text-decoration: underline;],' +\n        //     '@[style<text-align: right;?text-align: left;?text-align: center;],' +\n        //     'p,!div,ul,li'\n    };\n\n\nangular.module('ev-tinymce', [])\n    .directive('evTinymce', [function () {\n\n        var generatedIds = 0;\n        return {\n            template: '<div class=\"tiny-mce-wrapper\">'\n                + '<div class=\"ev-placeholder-container\"></div>'\n                + '<div class=\"ev-tinymce-content\"></div>'\n                + '<div class=\"ev-tinymce-toolbar\"></div>'\n                + '</div>',\n            restrict: 'AE',\n            replace: true,\n            require: '?ngModel',\n            scope: {\n                tinymceOptions: '=',\n            },\n\n            link: function (scope, elm, attrs, ngModel) {\n                var updateView = function () {\n                    ngModel.$setViewValue(tinyElm.html());\n                    if (tinyElm.html() === \"\" || tinyElm.text() === \"\") {\n                        placeholder = true;\n                        var editor = getTinyInstance();\n                        if (editor) {\n                            editor.setContent('<span class=\"placeholder\">' + attrs.placeholder + '</span>');\n                        }\n                    }\n                    if (!scope.$root.$$phase) {\n                      scope.$apply();\n                    }\n                };\n                var tinyId = 'uiTinymce' + generatedIds++;\n                var tinyElm = elm.find(\".ev-tinymce-content\");\n                tinyElm.attr('id', tinyId);\n                elm.find('.ev-tinymce-toolbar').attr('id', tinyId + 'toolbar');\n\n                var tinyInstance;\n                var getTinyInstance = function() {\n                    if (!tinyInstance) {\n                        tinyInstance = tinyMCE.get(tinyId);\n                    }\n                    return tinyInstance;\n                };\n                var options = angular.extend({\n                    fixed_toolbar_container: '#' + tinyId + 'toolbar',\n                }, defaultOptions, scope.tinymceOptions);\n\n\n                // /**\n                //  * This part is used for the max-chars attibute.\n                //  * It allows us to easily limit the number of characters typed in the editor\n                //  */\n                // options.maxChars = attrs.maxChars || options.maxChars || null;\n                // // We set the max char warning when the THRESHOLD is reached\n                // // Here, it's 85% of max chars\n                // var THRESHOLD = 85;\n\n                // /**\n                //  * Update the information area about the textEditor state (maxChars, ..)\n                //  */\n                // var updateInfo = function(currentChars, maxChars) {\n                //     var maxCharInfosElm = elm.parent().find('.max-chars-info');\n                //     maxCharInfosElm.text(currentChars + ' / ' + maxChars);\n\n                //     var isThresholdReached = ((currentChars / maxChars) * 100) > THRESHOLD;\n                //     var isMaxLimitReached  = currentChars >= maxChars;\n\n                //     var warningClassName = 'max-chars-warning';\n                //     var alertClassName   = 'max-chars-reached';\n                //     if(isThresholdReached) {\n                //         maxCharInfosElm.addClass(warningClassName);\n                //     } else {\n                //         maxCharInfosElm.removeClass(warningClassName);\n                //     }\n\n                //     if(isMaxLimitReached) {\n                //             maxCharInfosElm.addClass(alertClassName);\n                //     } else {\n                //             maxCharInfosElm.removeClass(alertClassName);\n                //     }\n                // };\n\n\n                /* Options */\n\n                var setup = function (ed) {\n                    ed.on('init', function() {\n                        ngModel.$render();\n                    });\n                    // Update model on button click\n                    ed.on('ExecCommand', function (e) {\n                        // ed.save();\n                        updateView();\n                    });\n                    // Update model on keypress\n                    ed.on('KeyUp', function (e) {\n                        // ed.save();\n                        updateView();\n                    });\n                    // Update model on change, i.e. copy/pasted text, plugins altering content\n                    ed.on('SetContent', function (e) {\n                        if(!e.initial){\n                            // ed.save();\n                            updateView();\n                        }\n                    });\n                    ed.on('blur', function(e) {\n                        tinyElm.blur();\n                        if(placeholder) {\n                            ngModel.$render();\n                        }\n                    });\n\n                    ed.on('focus', function (e) {\n                        console.log(placeholder);\n                        if (placeholder) {\n                            ed.setContent('');\n                            placeholder = false;\n                        }\n                    });\n                    // TODO : refactor with new changes\n                    // if(options.maxChars) {\n                    //     var currentText       = '';\n                    //     var currentTextLength = '';\n                    //     var oldText           = '';\n                    //     var maxChars          = options.maxChars;\n\n                    //     ed.on('init', function(e) {\n                    //        scope.$watch(function() { return ed.getContent(); }, function(newHtml, oldHtml) {\n                    //             currentText       = angular.element(newHtml).text();\n                    //             currentTextLength = currentText.length;\n                    //             oldText           = angular.element(oldHtml).text();\n\n                    //             *\n                    //              * Specific case where the old and new text are both over the limit of max chars.\n                    //              * This case can occur on the first initilization, if data from DB are over the\n                    //              * limit.\n                    //              * For now, we substring the content (but that break the html and everything..)\n\n                    //             var isLimitAlert = (oldText.length > maxChars) && (currentTextLength > maxChars);\n                    //             if(isLimitAlert) {\n                    //                 var shorterText = oldText.substring(0, maxChars);\n                    //                 scope.ngModel = shorterText;\n                    //                 currentTextLength = shorterText.length;\n\n                    //             } else if(currentTextLength > maxChars) {\n                    //                 scope.ngModel    = oldHtml;\n                    //                 currentTextLength = angular.element(scope.ngModel).text().length;\n                    //             }\n\n                    //             updateInfo(currentTextLength, maxChars);\n                    //         });\n                    //     });\n                    // }\n                };\n\n                // extend options with initial uiTinymceConfig and options from directive attribute value\n                options.setup = setup;\n                options.elems = tinyId;\n                options.mode = \"exact\";\n\n                tinyMCE.init(options);\n                tinyMCE.execCommand(\"mceToggleEditor\", false, tinyId);\n                var placeholder = false;\n\n                ngModel.$render = function() {\n                    var editor = getTinyInstance();\n                    if (editor) {\n                        // if (editor.getContent() === ngModel.$viewValue) {\n                        //     return;\n                        // }\n                        if (!ngModel.$viewValue || ngModel.$viewValue === \"\") {\n                            placeholder = true;\n                            editor.setContent('<span class=\"placeholder\">' + attrs.placeholder + '</span>');\n                        } else {\n                            editor.setContent(ngModel.$viewValue);\n                        }\n                    }\n                };\n                console.log('tadam');\n                // scope.$on('$destroy', function() {\n                //     if (tinyInstance) {\n                //         tinyInstance.destroy();\n                //         tinyInstance = null;\n                //     }\n                // });\n            },\n        };\n    }]);\n}) (window.tinyMCE);\n"],"sourceRoot":"/source/"}