{"version":3,"sources":["directives/tinymceDirective.js","plugins/evelements.js","plugins/evimage.js"],"names":[],"mappings":"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","file":"ev-fdm-tinymce.min.js","sourcesContent":["/* jshint camelcase: false */\n/* global tinymce */\n/**\n * Directive to override some settings in tinymce\n * Usage:\n * <ev-tinymce\n *     max-chars=\"1000\"                        -- maxChars this input accept (default: unlimited)\n *     ng-model=\"message.body\"                 -- ng-model\n *     tinymce-options=\"tinymceOptions\"        -- override default options with yours (object expected)\n *  ></ev-tinymce>\n */\n(function (tinyMCE) {\n    var defaultOptions = {\n        menubar: false,\n        statusbar: false,\n        //resize: false,\n        toolbar: 'bold italic underline | alignleft aligncenter alignright | bullist',\n        skin: false,\n        'verify_html': true,\n        'convert_fonts_to_spans': true,\n        //'content_css': '/bower_components/ev-fdm/dist/css/ev-fdm.min.css',\n        inline: true,\n        browser_spellcheck : true,\n\n        // We choose to have a restrictive approach here.\n        // The aim is to output the cleanest html possible.\n        // See http://www.tinymce.com/wiki.php/Configuration:valid_elements\n        // 'valid_elements':\n        //     'strong,em' +\n        //     'span[!style<text-decoration: underline;],' +\n        //     '@[style<text-align: right;?text-align: left;?text-align: center;],' +\n        //     'p,!div,ul,li'\n    };\n\n\nangular.module('ev-tinymce', [])\n    .provider('evTinymce', function() {\n        var configs = {};\n\n        this.register = function(name, value) {\n            if (configs.hasOwnProperty(name)) {\n                throw new Error('A config named \"' + name + '\" was already registered');\n            }\n            configs[name] = value;\n        };\n\n        this.get = function(name) {\n            return configs[name];\n        };\n\n        this.$get = function() { return configs; };\n    })\n    .directive('evTinymce', ['$timeout', 'evTinymce', function($timeout, evTinymce) {\n        var generatedIds = 0;\n        return {\n            template: '<div class=\"tiny-mce-wrapper\">'\n                + '<div class=\"ev-placeholder-container\"></div>'\n                + '<div class=\"ev-tinymce-content\"></div>'\n                + '<div ng-click=\"focusTinymce()\" class=\"ev-tinymce-toolbar\"></div>'\n                + '<div class=\"max-chars-info\"></div>'\n                + '</div>',\n            restrict: 'AE',\n            replace: true,\n            require: '?ngModel',\n\n            scope: {\n                tinymceOptions: '=',\n            },\n\n            link: function (scope, elm, attrs, ngModel) {\n                var tinyId = 'uiTinymce' + generatedIds++;\n                var tinyElm = elm.find('.ev-tinymce-content');\n                tinyElm.attr('id', tinyId);\n                elm.find('.ev-tinymce-toolbar').attr('id', tinyId + 'toolbar');\n\n                var tinyInstance;\n                var getTinyInstance = function() {\n                    if (!tinyInstance) {\n                        tinyInstance = tinyMCE.get(tinyId);\n                    }\n                    return tinyInstance;\n                };\n                var options = angular.extend({\n                    fixed_toolbar_container: '#' + tinyId + 'toolbar',\n                }, defaultOptions, evTinymce[attrs.configKey], scope.tinymceOptions);\n\n                // /**\n                //  * This part is used for the max-chars attibute.\n                //  * It allows us to easily limit the number of characters typed in the editor\n                //  */\n                var maxChars = options.maxChars = attrs.maxChars || options.maxChars || null;\n                // // We set the max char warning when the THRESHOLD is reached\n                // // Here, it's 85% of max chars\n                var THRESHOLD = 85;\n\n                // /**\n                //  * Update the information area about the textEditor state (maxChars, ..)\n                //  */\n                var updateCharCounter = function(currentChars, maxChars) {\n                    var maxCharInfosElm = elm.parent().find('.max-chars-info');\n                    maxCharInfosElm.text(currentChars + ' / ' + maxChars);\n\n                    var isThresholdReached = ((currentChars / maxChars) * 100) > THRESHOLD;\n                    var isMaxLimitReached  = currentChars >= maxChars;\n\n                    maxCharInfosElm.toggleClass('max-chars-warning', isThresholdReached);\n                    maxCharInfosElm.toggleClass('max-chars-reached', isMaxLimitReached);\n                };\n\n                var hasFocus = false;\n                var placeholder = false;\n                var currentHtml = '';\n                var currentText = '';\n\n                var setPlaceholder = function() {\n                    var editor = getTinyInstance();\n                    tinymce.DOM.addClass(tinyElm, 'placeholder-light');\n                    editor.setContent(attrs.placeholder);\n                };\n\n                var updatePlaceholder = function(newText) {\n                    var editor = getTinyInstance();\n                    if (hasFocus) {\n                        if (currentText === attrs.placeholder) {\n                            editor.setContent('');\n                            editor.selection.setCursorLocation();\n                            tinymce.DOM.removeClass(tinyElm, 'placeholder-light');\n                        }\n                    } else {\n                        if (newText !== attrs.placeholder) {\n                            setPlaceholder();\n                        }\n                    }\n                };\n\n                var updateView = function () {\n                    var editor = getTinyInstance();\n                    var newHtml = tinyElm.html();\n                    var newText = tinyElm.text();\n                    var newTextOverLimit = maxChars && newText.length > maxChars;\n                    var currentTextOverLimit = maxChars && currentText.length > maxChars;\n\n                    if (placeholder && newText === attrs.placeholder) {\n                        currentHtml = newHtml;\n                        currentText = newText;\n                    }\n                    /*\n                     * Specific case where the old and new text are both over the limit of max chars.\n                     * This case can occur on the first initilization, if data from DB are over the\n                     * limit.\n                     * For now, we substring the content (but that break the html and everything..)\n                     */\n                    else if (newTextOverLimit && (currentTextOverLimit || !currentText.length)) {\n                        var shorterText = newText.substr(0, maxChars);\n                        // be carefull, setContent call this method again\n                        editor.setContent(shorterText, { format: 'text' });\n                    } else if(currentTextOverLimit && newTextOverLimit) {\n                        editor.setContent(currentHtml); // be carefull, setContent call this method again\n                    } else {\n                        $timeout(function() {\n                            ngModel.$setViewValue(newText === '' || newText === attrs.placeholder ? '' : newHtml);\n                        });\n                        currentHtml = newHtml;\n                        currentText = newText;\n                    }\n\n                    if (maxChars) {\n                        updateCharCounter(currentText.length, maxChars);\n                    }\n\n                    placeholder = newText === '' || newText === attrs.placeholder;\n\n                    if (placeholder && attrs.placeholder) {\n                        updatePlaceholder(newText);\n                    }\n                };\n\n                ngModel.$render = function() {\n                    var editor = getTinyInstance();\n                    if (editor) {\n                        if (ngModel.$viewValue) {\n                            editor.setContent(ngModel.$viewValue);\n                        } else if (attrs.placeholder) {\n                            placeholder = true;\n                            setPlaceholder();\n                        }\n                    }\n                };\n\n                scope.focusTinymce = function() {\n                    var editor = getTinyInstance();\n                    if (editor) {\n                        editor.focus();\n                    }\n                };\n\n                /* Options */\n\n                var setup = function(editor) {\n                    editor.on('init', function() {\n                        if (ngModel.$viewValue) {\n                            ngModel.$render();\n                        }\n                    });\n                    // Update model on button click\n                    editor.on('ExecCommand', function (e) {\n                        updateView();\n                    });\n                    // Update model on keypress\n                    editor.on('KeyUp', function (e) {\n                        updateView();\n                    });\n                    // Update model on change, i.e. copy/pasted text, plugins altering content\n                    editor.on('SetContent', function (e) {\n                        if (!e.initial) {\n                            updateView();\n                        }\n                    });\n                    editor.on('blur', function(e) {\n                        if (hasFocus) {\n                            hasFocus = false;\n                            updateView();\n                        }\n                        tinyElm.blur();\n                    });\n\n                    editor.on('focus', function (e) {\n                        if (!hasFocus) {\n                            hasFocus = true;\n                            updateView();\n                        }\n                    });\n                };\n\n                // extend options with initial uiTinymceConfig and options from directive attribute value\n                options.setup = setup;\n                options.elems = tinyId;\n                options.mode = 'exact';\n\n                tinyMCE.init(options);\n\n                scope.$on('$destroy', function() {\n                    var editor = getTinyInstance();\n                    if (editor) {\n                        editor.destroy();\n                    }\n                });\n\n                tinyMCE.execCommand('mceToggleEditor', false, tinyId);\n            },\n        };\n    }]);\n}) (window.tinyMCE);\n","/* global tinymce */\n\ntinymce.PluginManager.add('evelements', function(editor) {\n    var evelementsConfig = editor.settings.evelements;\n    var evelementsOptions = editor.settings.evelementsOptions;\n\n    function setElement(elementConfig) {\n        return function() {\n            var dom = editor.dom;\n            var node = editor.selection.getNode();\n            if (node && elementConfig.matches(node)) {\n                dom.remove(node, true);\n            } else {\n                editor.insertContent(\n                    dom.createHTML(\n                        elementConfig.name,\n                        {},\n                        dom.encode(editor.selection.getContent({ format: 'text' }))\n                    )\n                );\n            }\n        };\n    }\n\n    function showDialog(elementConfig) {\n        return function() {\n            var dom = editor.dom;\n            var node = editor.selection.getNode();\n            var attributes = null;\n\n            if (node && elementConfig.matches(node)) {\n                attributes = {};\n                var attribs = dom.getAttribs(node);\n                for (var i = 0; i < attribs.length; ++i) {\n                    var item = attribs[i];\n                    attributes[item.name] = item.value;\n                }\n            } else {\n                node = null;\n            }\n\n            var key = elementConfig.key || elementConfig.name;\n            var callback = evelementsOptions[key] && evelementsOptions[key].callback;\n            var text = node ? ('innerText' in node ? node.innerText : node.textContent)\n                                 : editor.selection.getContent({ format: 'text' });\n            (callback || elementConfig.callback)(attributes, function(newAttributes, text) {\n                if (node) {\n                    editor.focus();\n                    if (!newAttributes && !text) {\n                        dom.remove(node, true);\n                        editor.undoManager.add();\n                        return;\n                    }\n                    dom.removeAllAttribs(node);\n                    dom.setAttribs(node, newAttributes);\n                    if (text) {\n                        if ('innerText' in node) {\n                            node.innerText = text;\n                        } else {\n                            node.textContent = text;\n                        }\n                    }\n                    editor.selection.select(node);\n                    editor.undoManager.add();\n                } else {\n                    editor.focus();\n                    node = dom.createHTML(elementConfig.name, newAttributes, text && dom.encode(text));\n                    editor.selection.setContent(node);\n                    editor.undoManager.add();\n                }\n            }, text, evelementsOptions);\n        };\n    }\n\n    if (typeof evelementsConfig === 'string') {\n        evelementsConfig = evelementsConfig.split(' ');\n    }\n\n    evelementsConfig.forEach(function(elementConfig) {\n        if (typeof elementConfig === 'string') {\n            elementConfig = {\n                name: elementConfig\n            };\n        }\n\n        elementConfig.matches = elementConfig.matches || function(node) {\n            return node.nodeName.toLowerCase() === elementConfig.name;\n        };\n\n        var callbackAction = elementConfig.callback ? showDialog(elementConfig) : setElement(elementConfig);\n\n        editor.addButton('ev' + (elementConfig.key || elementConfig.name), {\n            text: elementConfig.title !== undefined ? elementConfig.title : elementConfig.name,\n            icon: elementConfig.icon,\n            tooltip: elementConfig.tooltip || ('Set this text as ' + elementConfig.name),\n            shortcut: elementConfig.shortcut,\n            onclick: callbackAction,\n            stateSelector: elementConfig.selector || elementConfig.name,\n        });\n\n        if (elementConfig.shortcut) {\n            editor.addShortcut(elementConfig.shortcut, '', callbackAction);\n        }\n    });\n});\n","/* global tinymce, console */\n\ntinymce.PluginManager.add('evimage', function(editor) {\n    console.log('evimage is deprecated: use evelements');\n    function showDialog() {\n        var dom = editor.dom;\n        var node = editor.selection.getNode();\n        var attributes = null;\n\n        if (node && node.getAttribute('data-picture-id')) {\n            attributes = {\n                src: dom.getAttrib(node, 'src'),\n                alt: dom.getAttrib(node, 'alt'),\n                'class': dom.getAttrib(node, 'class'),\n                'data-picture-id': dom.getAttrib(node, 'data-picture-id')\n            };\n        }\n\n        editor.settings.evimage(attributes, function(attributesNew) {\n            if (attributes) {\n                dom.removeAllAttribs(node);\n                dom.setAttribs(node, attributesNew);\n            } else {\n                editor.selection.setContent(editor.dom.createHTML('img', attributesNew));\n            }\n        });\n    }\n\n    editor.addButton('evimage', {\n        icon: 'image',\n        tooltip: 'Insert/edit image',\n        onclick: showDialog,\n        stateSelector: 'img[data-picture-id]:not([data-mce-object],[data-mce-placeholder])'\n    });\n\n    editor.addMenuItem('evimage', {\n        icon: 'image',\n        text: 'Insert image',\n        onclick: showDialog,\n        context: 'insert',\n        prependToContext: true\n    });\n\n    editor.addCommand('mceImage', showDialog);\n});\n"],"sourceRoot":"/source/"}